
nucleo_h723_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a30  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08005d54  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08005db4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  240000d0  08005e14  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000274  08005e14  00020274  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013602  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002267  00000000  00000000  00033700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00035968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  000365d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032b61  00000000  00000000  00037160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001184c  00000000  00000000  00069cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00144a3b  00000000  00000000  0007b50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bff48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  001bff98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005ce4 	.word	0x08005ce4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005ce4 	.word	0x08005ce4

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_ETH_Init+0x80>)
 8000616:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <MX_ETH_Init+0x84>)
 8000618:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_ETH_Init+0x88>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_ETH_Init+0x88>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_ETH_Init+0x88>)
 8000628:	22e1      	movs	r2, #225	; 0xe1
 800062a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_ETH_Init+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_ETH_Init+0x88>)
 8000634:	2200      	movs	r2, #0
 8000636:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_ETH_Init+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ETH_Init+0x80>)
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <MX_ETH_Init+0x88>)
 8000642:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_ETH_Init+0x80>)
 8000646:	2201      	movs	r2, #1
 8000648:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ETH_Init+0x80>)
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_ETH_Init+0x8c>)
 800064e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ETH_Init+0x80>)
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_ETH_Init+0x90>)
 8000654:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_ETH_Init+0x80>)
 8000658:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800065c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_ETH_Init+0x80>)
 8000660:	f000 fdd8 	bl	8001214 <HAL_ETH_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800066a:	f000 fa7b 	bl	8000b64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800066e:	2238      	movs	r2, #56	; 0x38
 8000670:	2100      	movs	r1, #0
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_ETH_Init+0x94>)
 8000674:	f005 fb2e 	bl	8005cd4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_ETH_Init+0x94>)
 800067a:	2221      	movs	r2, #33	; 0x21
 800067c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_ETH_Init+0x94>)
 8000680:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000684:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_ETH_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24000124 	.word	0x24000124
 8000694:	40028000 	.word	0x40028000
 8000698:	240001d4 	.word	0x240001d4
 800069c:	24000070 	.word	0x24000070
 80006a0:	24000010 	.word	0x24000010
 80006a4:	240000ec 	.word	0x240000ec

080006a8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a59      	ldr	r2, [pc, #356]	; (800082c <HAL_ETH_MspInit+0x184>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f040 80ab 	bne.w	8000822 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006cc:	4b58      	ldr	r3, [pc, #352]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d2:	4a57      	ldr	r2, [pc, #348]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006dc:	4b54      	ldr	r3, [pc, #336]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e6:	623b      	str	r3, [r7, #32]
 80006e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006ea:	4b51      	ldr	r3, [pc, #324]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f0:	4a4f      	ldr	r2, [pc, #316]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006fa:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000704:	61fb      	str	r3, [r7, #28]
 8000706:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000708:	4b49      	ldr	r3, [pc, #292]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800070a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800070e:	4a48      	ldr	r2, [pc, #288]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000718:	4b45      	ldr	r3, [pc, #276]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	4a40      	ldr	r2, [pc, #256]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000736:	4b3e      	ldr	r3, [pc, #248]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	4a39      	ldr	r2, [pc, #228]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000754:	4b36      	ldr	r3, [pc, #216]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b33      	ldr	r3, [pc, #204]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	4a31      	ldr	r2, [pc, #196]	; (8000830 <HAL_ETH_MspInit+0x188>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	4a2a      	ldr	r2, [pc, #168]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <HAL_ETH_MspInit+0x188>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800079e:	2332      	movs	r3, #50	; 0x32
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ae:	230b      	movs	r3, #11
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	481e      	ldr	r0, [pc, #120]	; (8000834 <HAL_ETH_MspInit+0x18c>)
 80007ba:	f001 f94f 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007be:	2386      	movs	r3, #134	; 0x86
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ce:	230b      	movs	r3, #11
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d6:	4619      	mov	r1, r3
 80007d8:	4817      	ldr	r0, [pc, #92]	; (8000838 <HAL_ETH_MspInit+0x190>)
 80007da:	f001 f93f 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f0:	230b      	movs	r3, #11
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4810      	ldr	r0, [pc, #64]	; (800083c <HAL_ETH_MspInit+0x194>)
 80007fc:	f001 f92e 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000800:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <HAL_ETH_MspInit+0x198>)
 800081e:	f001 f91d 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	; 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40028000 	.word	0x40028000
 8000830:	58024400 	.word	0x58024400
 8000834:	58020800 	.word	0x58020800
 8000838:	58020000 	.word	0x58020000
 800083c:	58020400 	.word	0x58020400
 8000840:	58021800 	.word	0x58021800

08000844 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b71      	ldr	r3, [pc, #452]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000860:	4a6f      	ldr	r2, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800086a:	4b6d      	ldr	r3, [pc, #436]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000878:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087e:	4a68      	ldr	r2, [pc, #416]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000888:	4b65      	ldr	r3, [pc, #404]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b62      	ldr	r3, [pc, #392]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	4a60      	ldr	r2, [pc, #384]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a6:	4b5e      	ldr	r3, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a51      	ldr	r2, [pc, #324]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b4f      	ldr	r3, [pc, #316]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a4a      	ldr	r2, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	4a42      	ldr	r2, [pc, #264]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_GPIO_Init+0x1dc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	f003 0310 	and.w	r3, r3, #16
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000932:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x1e0>)
 8000934:	f001 fa3a 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x1e4>)
 8000940:	f001 fa34 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	4838      	ldr	r0, [pc, #224]	; (8000a2c <MX_GPIO_Init+0x1e8>)
 800094a:	f001 fa2f 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <MX_GPIO_Init+0x1ec>)
 8000964:	f001 f87a 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000968:	f244 0301 	movw	r3, #16385	; 0x4001
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4828      	ldr	r0, [pc, #160]	; (8000a24 <MX_GPIO_Init+0x1e0>)
 8000982:	f001 f86b 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <MX_GPIO_Init+0x1e4>)
 80009a0:	f001 f85c 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481e      	ldr	r0, [pc, #120]	; (8000a34 <MX_GPIO_Init+0x1f0>)
 80009ba:	f001 f84f 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4819      	ldr	r0, [pc, #100]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80009d4:	f001 f842 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x1f4>)
 80009f6:	f001 f831 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x1e8>)
 8000a12:	f001 f823 	bl	8001a5c <HAL_GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020400 	.word	0x58020400
 8000a28:	58020c00 	.word	0x58020c00
 8000a2c:	58021000 	.word	0x58021000
 8000a30:	58020800 	.word	0x58020800
 8000a34:	58021800 	.word	0x58021800
 8000a38:	58020000 	.word	0x58020000

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f000 fa3a 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f81e 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a48:	f7ff fefc 	bl	8000844 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a4c:	f7ff fde0 	bl	8000610 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a50:	f000 f94a 	bl	8000ce8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a54:	f000 f9fe 	bl	8000e54 <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <main+0x40>)
 8000a5c:	f001 f9bf 	bl	8001dde <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <main+0x40>)
 8000a66:	f001 f9ba 	bl	8001dde <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <main+0x44>)
 8000a6e:	f001 f9b6 	bl	8001dde <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1500);
 8000a72:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a76:	f000 fab1 	bl	8000fdc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a7a:	e7ed      	b.n	8000a58 <main+0x1c>
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	58021000 	.word	0x58021000

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	224c      	movs	r2, #76	; 0x4c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f005 f91e 	bl	8005cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 f918 	bl	8005cd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa4:	2002      	movs	r0, #2
 8000aa6:	f001 f9b5 	bl	8001e14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <SystemClock_Config+0xdc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <SystemClock_Config+0xdc>)
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xdc>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac6:	bf00      	nop
 8000ac8:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <SystemClock_Config+0xdc>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad4:	d1f8      	bne.n	8000ac8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ad6:	2321      	movs	r3, #33	; 0x21
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ada:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000af0:	f240 1313 	movw	r3, #275	; 0x113
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afa:	2304      	movs	r3, #4
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b02:	2304      	movs	r3, #4
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f9b8 	bl	8001e88 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b1e:	f000 f821 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	233f      	movs	r3, #63	; 0x3f
 8000b24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b32:	2340      	movs	r3, #64	; 0x40
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2103      	movs	r1, #3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fd77 	bl	800263c <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b54:	f000 f806 	bl	8000b64 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3770      	adds	r7, #112	; 0x70
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024800 	.word	0x58024800

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f9d4 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <SystemInit+0xd0>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <SystemInit+0xd0>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <SystemInit+0xd4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	2b06      	cmp	r3, #6
 8000c16:	d807      	bhi.n	8000c28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <SystemInit+0xd4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f023 030f 	bic.w	r3, r3, #15
 8000c20:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <SystemInit+0xd4>)
 8000c22:	f043 0307 	orr.w	r3, r3, #7
 8000c26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <SystemInit+0xd8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <SystemInit+0xd8>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <SystemInit+0xd8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <SystemInit+0xd8>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4924      	ldr	r1, [pc, #144]	; (8000cd0 <SystemInit+0xd8>)
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <SystemInit+0xdc>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <SystemInit+0xd4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c52:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <SystemInit+0xd4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f023 030f 	bic.w	r3, r3, #15
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <SystemInit+0xd4>)
 8000c5c:	f043 0307 	orr.w	r3, r3, #7
 8000c60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <SystemInit+0xd8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <SystemInit+0xd8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <SystemInit+0xd8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <SystemInit+0xd8>)
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <SystemInit+0xe0>)
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <SystemInit+0xd8>)
 8000c7c:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <SystemInit+0xe4>)
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SystemInit+0xd8>)
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <SystemInit+0xe8>)
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SystemInit+0xd8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <SystemInit+0xd8>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <SystemInit+0xe8>)
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <SystemInit+0xd8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <SystemInit+0xd8>)
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <SystemInit+0xe8>)
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <SystemInit+0xd8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <SystemInit+0xd8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <SystemInit+0xd8>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <SystemInit+0xd8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <SystemInit+0xec>)
 8000cb8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cbc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	52002000 	.word	0x52002000
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd8:	02020200 	.word	0x02020200
 8000cdc:	01ff0000 	.word	0x01ff0000
 8000ce0:	01010280 	.word	0x01010280
 8000ce4:	52004000 	.word	0x52004000

08000ce8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <MX_USART3_UART_Init+0x94>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d32:	f003 fdd1 	bl	80048d8 <HAL_UART_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f7ff ff12 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d40:	2100      	movs	r1, #0
 8000d42:	480d      	ldr	r0, [pc, #52]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d44:	f004 fed7 	bl	8005af6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d4e:	f7ff ff09 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4808      	ldr	r0, [pc, #32]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d56:	f004 ff0c 	bl	8005b72 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f7ff ff00 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_USART3_UART_Init+0x90>)
 8000d66:	f004 fe8d 	bl	8005a84 <HAL_UARTEx_DisableFifoMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f7ff fef8 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	240001dc 	.word	0x240001dc
 8000d7c:	40004800 	.word	0x40004800

08000d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0b8      	sub	sp, #224	; 0xe0
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	22b8      	movs	r2, #184	; 0xb8
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 ff97 	bl	8005cd4 <memset>
  if(uartHandle->Instance==USART3)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <HAL_UART_MspInit+0xc8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d146      	bne.n	8000e3e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000db0:	f04f 0202 	mov.w	r2, #2
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 ffc4 	bl	8002d54 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dd2:	f7ff fec7 	bl	8000b64 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_UART_MspInit+0xcc>)
 8000dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_UART_MspInit+0xcc>)
 8000dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000de6:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_UART_MspInit+0xcc>)
 8000de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_UART_MspInit+0xcc>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0xcc>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0xcc>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_UART_MspInit+0xd0>)
 8000e3a:	f000 fe0f 	bl	8001a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	37e0      	adds	r7, #224	; 0xe0
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020c00 	.word	0x58020c00

08000e54 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e68:	f7ff fec6 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f004 fefb 	bl	8005c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fdd1 	bl	8000a3c <main>
  bx  lr
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ea0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ea4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ea8:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8000eac:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000eb0:	24000274 	.word	0x24000274

08000eb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC3_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 f976 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec4:	f001 fd70 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_Init+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <HAL_Init+0x6c>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_Init+0x68>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_Init+0x6c>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_Init+0x70>)
 8000efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_Init+0x74>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f814 	bl	8000f30 <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e002      	b.n	8000f18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fe2d 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	58024400 	.word	0x58024400
 8000f24:	08005cfc 	.word	0x08005cfc
 8000f28:	24000004 	.word	0x24000004
 8000f2c:	24000000 	.word	0x24000000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_InitTick+0x60>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e021      	b.n	8000f88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_InitTick+0x64>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_InitTick+0x60>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f94d 	bl	80011fa <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f925 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x68>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2400000c 	.word	0x2400000c
 8000f94:	24000000 	.word	0x24000000
 8000f98:	24000008 	.word	0x24000008

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2400000c 	.word	0x2400000c
 8000fc0:	24000270 	.word	0x24000270

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	24000270 	.word	0x24000270

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2400000c 	.word	0x2400000c

08001024 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001034:	4904      	ldr	r1, [pc, #16]	; (8001048 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58000400 	.word	0x58000400

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x40>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	05fa0000 	.word	0x05fa0000

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff47 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff90 	bl	8001104 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5f 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb2 	bl	800116c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e0cf      	b.n	80013c6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2223      	movs	r2, #35	; 0x23
 8001234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fa35 	bl	80006a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b64      	ldr	r3, [pc, #400]	; (80013d0 <HAL_ETH_Init+0x1bc>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001244:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <HAL_ETH_Init+0x1bc>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124e:	4b60      	ldr	r3, [pc, #384]	; (80013d0 <HAL_ETH_Init+0x1bc>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7a1b      	ldrb	r3, [r3, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fedd 	bl	8001024 <HAL_SYSCFG_ETHInterfaceSelect>
 800126a:	e003      	b.n	8001274 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800126c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001270:	f7ff fed8 	bl	8001024 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001274:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <HAL_ETH_Init+0x1c0>)
 8001276:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800128e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001290:	f7ff fe98 	bl	8000fc4 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001296:	e011      	b.n	80012bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001298:	f7ff fe94 	bl	8000fc4 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012a6:	d909      	bls.n	80012bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2204      	movs	r2, #4
 80012ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	22e0      	movs	r2, #224	; 0xe0
 80012b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e084      	b.n	80013c6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1e4      	bne.n	8001298 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f886 	bl	80013e0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012d4:	f001 fce2 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <HAL_ETH_Init+0x1c4>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	0c9a      	lsrs	r2, r3, #18
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3a01      	subs	r2, #1
 80012e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fa71 	bl	80017d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80012fe:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800130a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800130e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	22e0      	movs	r2, #224	; 0xe0
 800132a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e049      	b.n	80013c6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_ETH_Init+0x1c8>)
 8001340:	4013      	ands	r3, r2
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6952      	ldr	r2, [r2, #20]
 8001346:	0051      	lsls	r1, r2, #1
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	430b      	orrs	r3, r1
 800134e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001352:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fad9 	bl	800190e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fb1f 	bl	80019a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	3305      	adds	r3, #5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021a      	lsls	r2, r3, #8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	3304      	adds	r3, #4
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	3303      	adds	r3, #3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	3302      	adds	r3, #2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2210      	movs	r2, #16
 80013c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58000400 	.word	0x58000400
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	ffff8001 	.word	0xffff8001

080013e0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013fa:	f001 fc4f 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 80013fe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d908      	bls.n	800141a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4a1d      	ldr	r2, [pc, #116]	; (8001480 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d804      	bhi.n	800141a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e027      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d908      	bls.n	8001434 <HAL_ETH_SetMDIOClockRange+0x54>
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d204      	bcs.n	8001434 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e01a      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d303      	bcc.n	8001444 <HAL_ETH_SetMDIOClockRange+0x64>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d911      	bls.n	8001468 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d908      	bls.n	800145e <HAL_ETH_SetMDIOClockRange+0x7e>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_ETH_SetMDIOClockRange+0xac>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d804      	bhi.n	800145e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e005      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e000      	b.n	800146a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001468:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	01312cff 	.word	0x01312cff
 8001480:	02160ebf 	.word	0x02160ebf
 8001484:	03938700 	.word	0x03938700
 8001488:	05f5e0ff 	.word	0x05f5e0ff
 800148c:	08f0d17f 	.word	0x08f0d17f

08001490 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80014a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	791b      	ldrb	r3, [r3, #4]
 80014a8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80014aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	7b5b      	ldrb	r3, [r3, #13]
 80014b8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	7b9b      	ldrb	r3, [r3, #14]
 80014c0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	7bdb      	ldrb	r3, [r3, #15]
 80014c8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	7c12      	ldrb	r2, [r2, #16]
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d102      	bne.n	80014da <ETH_SetMACConfig+0x4a>
 80014d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d8:	e000      	b.n	80014dc <ETH_SetMACConfig+0x4c>
 80014da:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	7c52      	ldrb	r2, [r2, #17]
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetMACConfig+0x5c>
 80014e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ea:	e000      	b.n	80014ee <ETH_SetMACConfig+0x5e>
 80014ec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	7c9b      	ldrb	r3, [r3, #18]
 80014f4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014f6:	431a      	orrs	r2, r3
               macconf->Speed |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80014fc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7f1b      	ldrb	r3, [r3, #28]
 8001508:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800150a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	7f5b      	ldrb	r3, [r3, #29]
 8001510:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001512:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	7f92      	ldrb	r2, [r2, #30]
 8001518:	2a00      	cmp	r2, #0
 800151a:	d102      	bne.n	8001522 <ETH_SetMACConfig+0x92>
 800151c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001520:	e000      	b.n	8001524 <ETH_SetMACConfig+0x94>
 8001522:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001524:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7fdb      	ldrb	r3, [r3, #31]
 800152a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800152c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001534:	2a00      	cmp	r2, #0
 8001536:	d102      	bne.n	800153e <ETH_SetMACConfig+0xae>
 8001538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153c:	e000      	b.n	8001540 <ETH_SetMACConfig+0xb0>
 800153e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001540:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001546:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800154e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001550:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b56      	ldr	r3, [pc, #344]	; (80016bc <ETH_SetMACConfig+0x22c>)
 8001562:	4013      	ands	r3, r2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	430b      	orrs	r3, r1
 800156c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800157a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800157c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001584:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800158e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001590:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001598:	2a00      	cmp	r2, #0
 800159a:	d102      	bne.n	80015a2 <ETH_SetMACConfig+0x112>
 800159c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0x114>
 80015a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015a4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <ETH_SetMACConfig+0x230>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	68f9      	ldr	r1, [r7, #12]
 80015be:	430b      	orrs	r3, r1
 80015c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015ce:	4313      	orrs	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <ETH_SetMACConfig+0x234>)
 80015da:	4013      	ands	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	430b      	orrs	r3, r1
 80015e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d101      	bne.n	8001602 <ETH_SetMACConfig+0x172>
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	e000      	b.n	8001604 <ETH_SetMACConfig+0x174>
 8001602:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001604:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001616:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	430b      	orrs	r3, r1
 8001624:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800162c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001634:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001642:	f023 0103 	bic.w	r1, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	430a      	orrs	r2, r1
 800164e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800165a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001676:	2a00      	cmp	r2, #0
 8001678:	d101      	bne.n	800167e <ETH_SetMACConfig+0x1ee>
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	e000      	b.n	8001680 <ETH_SetMACConfig+0x1f0>
 800167e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001680:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001688:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800168a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001692:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001694:	4313      	orrs	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80016a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	00048083 	.word	0x00048083
 80016c0:	c0f88000 	.word	0xc0f88000
 80016c4:	fffffef0 	.word	0xfffffef0

080016c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <ETH_SetDMAConfig+0xf8>)
 80016de:	4013      	ands	r3, r2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	6811      	ldr	r1, [r2, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	7b1b      	ldrb	r3, [r3, #12]
 8001700:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <ETH_SetDMAConfig+0xfc>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001720:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	7b5b      	ldrb	r3, [r3, #13]
 8001726:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001738:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <ETH_SetDMAConfig+0x100>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	68f9      	ldr	r1, [r7, #12]
 8001746:	430b      	orrs	r3, r1
 8001748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	7d1b      	ldrb	r3, [r3, #20]
 8001758:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800175a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	7f5b      	ldrb	r3, [r3, #29]
 8001760:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <ETH_SetDMAConfig+0x104>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	68f9      	ldr	r1, [r7, #12]
 800177c:	430b      	orrs	r3, r1
 800177e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001782:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	7f1b      	ldrb	r3, [r3, #28]
 800178a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001790:	4313      	orrs	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <ETH_SetDMAConfig+0x108>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	430b      	orrs	r3, r1
 80017ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017b0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	ffff87fd 	.word	0xffff87fd
 80017c4:	ffff2ffe 	.word	0xffff2ffe
 80017c8:	fffec000 	.word	0xfffec000
 80017cc:	ffc0efef 	.word	0xffc0efef
 80017d0:	7fc0ffff 	.word	0x7fc0ffff

080017d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0a4      	sub	sp, #144	; 0x90
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80017dc:	2301      	movs	r3, #1
 80017de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e2:	2300      	movs	r3, #0
 80017e4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800181c:	2300      	movs	r3, #0
 800181e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800182c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001830:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800183c:	2301      	movs	r3, #1
 800183e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800184e:	2300      	movs	r3, #0
 8001850:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001852:	2300      	movs	r3, #0
 8001854:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001856:	2300      	movs	r3, #0
 8001858:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800186c:	2320      	movs	r3, #32
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800187e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001884:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80018ae:	2300      	movs	r3, #0
 80018b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fde6 	bl	8001490 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80018f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fee1 	bl	80016c8 <ETH_SetDMAConfig>
}
 8001906:	bf00      	nop
 8001908:	3790      	adds	r7, #144	; 0x90
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	e01d      	b.n	8001958 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68d9      	ldr	r1, [r3, #12]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	3206      	adds	r2, #6
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d9de      	bls.n	800191c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	461a      	mov	r2, r3
 800196e:	2303      	movs	r3, #3
 8001970:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e023      	b.n	80019f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6919      	ldr	r1, [r3, #16]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2200      	movs	r2, #0
 80019ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	3212      	adds	r2, #18
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d9d8      	bls.n	80019ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a22:	461a      	mov	r2, r3
 8001a24:	2303      	movs	r3, #3
 8001a26:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a6a:	4b86      	ldr	r3, [pc, #536]	; (8001c84 <HAL_GPIO_Init+0x228>)
 8001a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a6e:	e18c      	b.n	8001d8a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 817e 	beq.w	8001d84 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_GPIO_Init+0x44>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d130      	bne.n	8001b02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 0201 	and.w	r2, r3, #1
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d017      	beq.n	8001b3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d123      	bne.n	8001b92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	69b9      	ldr	r1, [r7, #24]
 8001b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80d8 	beq.w	8001d84 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_GPIO_Init+0x22c>)
 8001bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bda:	4a2b      	ldr	r2, [pc, #172]	; (8001c88 <HAL_GPIO_Init+0x22c>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_GPIO_Init+0x22c>)
 8001be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <HAL_GPIO_Init+0x230>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_GPIO_Init+0x234>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04a      	beq.n	8001cb4 <HAL_GPIO_Init+0x258>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_GPIO_Init+0x238>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1b      	ldr	r2, [pc, #108]	; (8001c98 <HAL_GPIO_Init+0x23c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d025      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_GPIO_Init+0x240>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01f      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_GPIO_Init+0x244>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_GPIO_Init+0x248>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_GPIO_Init+0x24c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_GPIO_Init+0x250>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x20a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <HAL_GPIO_Init+0x254>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x206>
 8001c5e:	2309      	movs	r3, #9
 8001c60:	e029      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c62:	230a      	movs	r3, #10
 8001c64:	e027      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c66:	2307      	movs	r3, #7
 8001c68:	e025      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e023      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e021      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e01f      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e01d      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e01b      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e019      	b.n	8001cb6 <HAL_GPIO_Init+0x25a>
 8001c82:	bf00      	nop
 8001c84:	58000080 	.word	0x58000080
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	58000400 	.word	0x58000400
 8001c90:	58020000 	.word	0x58020000
 8001c94:	58020400 	.word	0x58020400
 8001c98:	58020800 	.word	0x58020800
 8001c9c:	58020c00 	.word	0x58020c00
 8001ca0:	58021000 	.word	0x58021000
 8001ca4:	58021400 	.word	0x58021400
 8001ca8:	58021800 	.word	0x58021800
 8001cac:	58021c00 	.word	0x58021c00
 8001cb0:	58022400 	.word	0x58022400
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc6:	4938      	ldr	r1, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x34c>)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f ae6b 	bne.w	8001a70 <HAL_GPIO_Init+0x14>
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3724      	adds	r7, #36	; 0x24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	58000400 	.word	0x58000400

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	041a      	lsls	r2, r3, #16
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	619a      	str	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	400b      	ands	r3, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_PWREx_ConfigSupply+0x70>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00a      	beq.n	8001e3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_PWREx_ConfigSupply+0x70>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01f      	b.n	8001e7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e01d      	b.n	8001e7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_PWREx_ConfigSupply+0x70>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	490f      	ldr	r1, [pc, #60]	; (8001e84 <HAL_PWREx_ConfigSupply+0x70>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e4e:	f7ff f8b9 	bl	8000fc4 <HAL_GetTick>
 8001e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e54:	e009      	b.n	8001e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e56:	f7ff f8b5 	bl	8000fc4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e64:	d901      	bls.n	8001e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e007      	b.n	8001e7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_PWREx_ConfigSupply+0x70>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e76:	d1ee      	bne.n	8001e56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	58024800 	.word	0x58024800

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e3c8      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8087 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea8:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eb2:	4b86      	ldr	r3, [pc, #536]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d007      	beq.n	8001ece <HAL_RCC_OscConfig+0x46>
 8001ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec0:	2b18      	cmp	r3, #24
 8001ec2:	d110      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e>
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d06c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x12c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d168      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e3a2      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x76>
 8001ef0:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a75      	ldr	r2, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e02e      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x98>
 8001f06:	4b71      	ldr	r3, [pc, #452]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a70      	ldr	r2, [pc, #448]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6e      	ldr	r3, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6d      	ldr	r2, [pc, #436]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e01d      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0xbc>
 8001f2a:	4b68      	ldr	r3, [pc, #416]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a67      	ldr	r2, [pc, #412]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b65      	ldr	r3, [pc, #404]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a64      	ldr	r2, [pc, #400]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCC_OscConfig+0xd4>
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a60      	ldr	r2, [pc, #384]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a5d      	ldr	r2, [pc, #372]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff f82e 	bl	8000fc4 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff f82a 	bl	8000fc4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e356      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f7e:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0xe4>
 8001f8a:	e014      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f81a 	bl	8000fc4 <HAL_GetTick>
 8001f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff f816 	bl	8000fc4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e342      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fa6:	4b49      	ldr	r3, [pc, #292]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x10c>
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 808c 	beq.w	80020dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc4:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fcc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fce:	4b3f      	ldr	r3, [pc, #252]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_RCC_OscConfig+0x162>
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	2b18      	cmp	r3, #24
 8001fde:	d137      	bne.n	8002050 <HAL_RCC_OscConfig+0x1c8>
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d132      	bne.n	8002050 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x17a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e314      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0219 	bic.w	r2, r3, #25
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	492f      	ldr	r1, [pc, #188]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe ffd6 	bl	8000fc4 <HAL_GetTick>
 8002018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7fe ffd2 	bl	8000fc4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e2fe      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	061b      	lsls	r3, r3, #24
 8002048:	4920      	ldr	r1, [pc, #128]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204e:	e045      	b.n	80020dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d026      	beq.n	80020a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002058:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 0219 	bic.w	r2, r3, #25
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4919      	ldr	r1, [pc, #100]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe ffab 	bl	8000fc4 <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7fe ffa7 	bl	8000fc4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e2d3      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	490b      	ldr	r1, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e01a      	b.n	80020dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_RCC_OscConfig+0x244>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe ff87 	bl	8000fc4 <HAL_GetTick>
 80020b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7fe ff83 	bl	8000fc4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d903      	bls.n	80020d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e2af      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
 80020cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020d0:	4b96      	ldr	r3, [pc, #600]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d06a      	beq.n	80021be <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e8:	4b90      	ldr	r3, [pc, #576]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f2:	4b8e      	ldr	r3, [pc, #568]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d007      	beq.n	800210e <HAL_RCC_OscConfig+0x286>
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b18      	cmp	r3, #24
 8002102:	d11b      	bne.n	800213c <HAL_RCC_OscConfig+0x2b4>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800210e:	4b87      	ldr	r3, [pc, #540]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x29e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e282      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002126:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	497d      	ldr	r1, [pc, #500]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800213a:	e040      	b.n	80021be <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002144:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a78      	ldr	r2, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800214a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe ff38 	bl	8000fc4 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002158:	f7fe ff34 	bl	8000fc4 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e260      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800216a:	4b70      	ldr	r3, [pc, #448]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002176:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	4969      	ldr	r1, [pc, #420]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60cb      	str	r3, [r1, #12]
 800218a:	e018      	b.n	80021be <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800218c:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe ff14 	bl	8000fc4 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021a0:	f7fe ff10 	bl	8000fc4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e23c      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021b2:	4b5e      	ldr	r3, [pc, #376]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d036      	beq.n	8002238 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d019      	beq.n	8002206 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d2:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80021d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d6:	4a55      	ldr	r2, [pc, #340]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021de:	f7fe fef1 	bl	8000fc4 <HAL_GetTick>
 80021e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe feed 	bl	8000fc4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e219      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80021fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x35e>
 8002204:	e018      	b.n	8002238 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220a:	4a48      	ldr	r2, [pc, #288]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7fe fed7 	bl	8000fc4 <HAL_GetTick>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221a:	f7fe fed3 	bl	8000fc4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1ff      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800222c:	4b3f      	ldr	r3, [pc, #252]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d036      	beq.n	80022b2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d019      	beq.n	8002280 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800224c:	4b37      	ldr	r3, [pc, #220]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a36      	ldr	r2, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002256:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002258:	f7fe feb4 	bl	8000fc4 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002260:	f7fe feb0 	bl	8000fc4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1dc      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x3d8>
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800228c:	f7fe fe9a 	bl	8000fc4 <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002294:	f7fe fe96 	bl	8000fc4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1c2      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8086 	beq.w	80023cc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x4a8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1a      	ldr	r2, [pc, #104]	; (8002330 <HAL_RCC_OscConfig+0x4a8>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fe7a 	bl	8000fc4 <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fe76 	bl	8000fc4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1a2      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_OscConfig+0x4a8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d106      	bne.n	8002308 <HAL_RCC_OscConfig+0x480>
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	e032      	b.n	800236e <HAL_RCC_OscConfig+0x4e6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <HAL_RCC_OscConfig+0x4ac>
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6713      	str	r3, [r2, #112]	; 0x70
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	4a02      	ldr	r2, [pc, #8]	; (800232c <HAL_RCC_OscConfig+0x4a4>)
 8002322:	f023 0304 	bic.w	r3, r3, #4
 8002326:	6713      	str	r3, [r2, #112]	; 0x70
 8002328:	e021      	b.n	800236e <HAL_RCC_OscConfig+0x4e6>
 800232a:	bf00      	nop
 800232c:	58024400 	.word	0x58024400
 8002330:	58024800 	.word	0x58024800
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x4ce>
 800233c:	4b83      	ldr	r3, [pc, #524]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a82      	ldr	r2, [pc, #520]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	4b80      	ldr	r3, [pc, #512]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a7f      	ldr	r2, [pc, #508]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	e00b      	b.n	800236e <HAL_RCC_OscConfig+0x4e6>
 8002356:	4b7d      	ldr	r3, [pc, #500]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a7c      	ldr	r2, [pc, #496]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a79      	ldr	r2, [pc, #484]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fe25 	bl	8000fc4 <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fe21 	bl	8000fc4 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e14b      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ee      	beq.n	800237e <HAL_RCC_OscConfig+0x4f6>
 80023a0:	e014      	b.n	80023cc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe fe0f 	bl	8000fc4 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7fe fe0b 	bl	8000fc4 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e135      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023c0:	4b62      	ldr	r3, [pc, #392]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 812a 	beq.w	800262a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023de:	2b18      	cmp	r3, #24
 80023e0:	f000 80ba 	beq.w	8002558 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f040 8095 	bne.w	8002518 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b57      	ldr	r3, [pc, #348]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80023f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe fde3 	bl	8000fc4 <HAL_GetTick>
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fddf 	bl	8000fc4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e10b      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002414:	4b4d      	ldr	r3, [pc, #308]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002424:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x6c8>)
 8002426:	4013      	ands	r3, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	430a      	orrs	r2, r1
 8002434:	4945      	ldr	r1, [pc, #276]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	628b      	str	r3, [r1, #40]	; 0x28
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	3b01      	subs	r3, #1
 8002440:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002448:	3b01      	subs	r3, #1
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	b29b      	uxth	r3, r3
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	3b01      	subs	r3, #1
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800246a:	4938      	ldr	r1, [pc, #224]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	4a35      	ldr	r2, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <HAL_RCC_OscConfig+0x6cc>)
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002488:	00d2      	lsls	r2, r2, #3
 800248a:	4930      	ldr	r1, [pc, #192]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f023 020c 	bic.w	r2, r3, #12
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	492b      	ldr	r1, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a6:	f023 0202 	bic.w	r2, r3, #2
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4927      	ldr	r1, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	4a21      	ldr	r2, [pc, #132]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024d8:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fd68 	bl	8000fc4 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fd64 	bl	8000fc4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e090      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x670>
 8002516:	e088      	b.n	800262a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fd4e 	bl	8000fc4 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fd4a 	bl	8000fc4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e076      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_OscConfig+0x6c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x6a4>
 800254a:	e06e      	b.n	800262a <HAL_RCC_OscConfig+0x7a2>
 800254c:	58024400 	.word	0x58024400
 8002550:	fffffc0c 	.word	0xfffffc0c
 8002554:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2b01      	cmp	r3, #1
 800256a:	d031      	beq.n	80025d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d12a      	bne.n	80025d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d122      	bne.n	80025d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d11a      	bne.n	80025d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0a5b      	lsrs	r3, r3, #9
 800259e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d111      	bne.n	80025d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d108      	bne.n	80025d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0e1b      	lsrs	r3, r3, #24
 80025c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e02b      	b.n	800262c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 80025d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d01f      	beq.n	800262a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f6:	f7fe fce5 	bl	8000fc4 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80025fc:	bf00      	nop
 80025fe:	f7fe fce1 	bl	8000fc4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	4293      	cmp	r3, r2
 8002608:	d0f9      	beq.n	80025fe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 800260c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x7b0>)
 8002610:	4013      	ands	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002616:	00d2      	lsls	r2, r2, #3
 8002618:	4906      	ldr	r1, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 800261a:	4313      	orrs	r3, r2
 800261c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_RCC_OscConfig+0x7ac>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3730      	adds	r7, #48	; 0x30
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	58024400 	.word	0x58024400
 8002638:	ffff0007 	.word	0xffff0007

0800263c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e19c      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b8a      	ldr	r3, [pc, #552]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d910      	bls.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b87      	ldr	r3, [pc, #540]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 020f 	bic.w	r2, r3, #15
 8002666:	4985      	ldr	r1, [pc, #532]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b83      	ldr	r3, [pc, #524]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e184      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002698:	429a      	cmp	r2, r3
 800269a:	d908      	bls.n	80026ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	4975      	ldr	r1, [pc, #468]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d908      	bls.n	80026dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026ca:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	496a      	ldr	r1, [pc, #424]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d010      	beq.n	800270a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	4b64      	ldr	r3, [pc, #400]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d908      	bls.n	800270a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026f8:	4b61      	ldr	r3, [pc, #388]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	495e      	ldr	r1, [pc, #376]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002706:	4313      	orrs	r3, r2
 8002708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002722:	429a      	cmp	r2, r3
 8002724:	d908      	bls.n	8002738 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002726:	4b56      	ldr	r3, [pc, #344]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4953      	ldr	r1, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002734:	4313      	orrs	r3, r2
 8002736:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b4d      	ldr	r3, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	429a      	cmp	r2, r3
 8002752:	d908      	bls.n	8002766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f023 020f 	bic.w	r2, r3, #15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4947      	ldr	r1, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002762:	4313      	orrs	r3, r2
 8002764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d055      	beq.n	800281e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4940      	ldr	r1, [pc, #256]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002780:	4313      	orrs	r3, r2
 8002782:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d107      	bne.n	800279c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d121      	bne.n	80027dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0f6      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a4:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d115      	bne.n	80027dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0ea      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0de      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0d6      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f023 0207 	bic.w	r2, r3, #7
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4925      	ldr	r1, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ee:	f7fe fbe9 	bl	8000fc4 <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f4:	e00a      	b.n	800280c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7fe fbe5 	bl	8000fc4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0be      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	429a      	cmp	r2, r3
 800281c:	d1eb      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	429a      	cmp	r2, r3
 8002838:	d208      	bcs.n	800284c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f023 020f 	bic.w	r2, r3, #15
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x244>)
 8002848:	4313      	orrs	r3, r2
 800284a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d214      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 020f 	bic.w	r2, r3, #15
 8002862:	4906      	ldr	r1, [pc, #24]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <HAL_RCC_ClockConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e086      	b.n	800298a <HAL_RCC_ClockConfig+0x34e>
 800287c:	52002000 	.word	0x52002000
 8002880:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d010      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800289c:	429a      	cmp	r2, r3
 800289e:	d208      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	4939      	ldr	r1, [pc, #228]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d208      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	492e      	ldr	r1, [pc, #184]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d010      	beq.n	800290e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d208      	bcs.n	800290e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4922      	ldr	r1, [pc, #136]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 800290a:	4313      	orrs	r3, r2
 800290c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002926:	429a      	cmp	r2, r3
 8002928:	d208      	bcs.n	800293c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4917      	ldr	r1, [pc, #92]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 8002938:	4313      	orrs	r3, r2
 800293a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800293c:	f000 f834 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	4912      	ldr	r1, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_ClockConfig+0x358>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x360>)
 8002972:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x364>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x368>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fad6 	bl	8000f30 <HAL_InitTick>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
 8002998:	08005cfc 	.word	0x08005cfc
 800299c:	24000004 	.word	0x24000004
 80029a0:	24000000 	.word	0x24000000
 80029a4:	24000008 	.word	0x24000008

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ae:	4bb3      	ldr	r3, [pc, #716]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b6:	2b18      	cmp	r3, #24
 80029b8:	f200 8155 	bhi.w	8002c66 <HAL_RCC_GetSysClockFreq+0x2be>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	08002a29 	.word	0x08002a29
 80029c8:	08002c67 	.word	0x08002c67
 80029cc:	08002c67 	.word	0x08002c67
 80029d0:	08002c67 	.word	0x08002c67
 80029d4:	08002c67 	.word	0x08002c67
 80029d8:	08002c67 	.word	0x08002c67
 80029dc:	08002c67 	.word	0x08002c67
 80029e0:	08002c67 	.word	0x08002c67
 80029e4:	08002a4f 	.word	0x08002a4f
 80029e8:	08002c67 	.word	0x08002c67
 80029ec:	08002c67 	.word	0x08002c67
 80029f0:	08002c67 	.word	0x08002c67
 80029f4:	08002c67 	.word	0x08002c67
 80029f8:	08002c67 	.word	0x08002c67
 80029fc:	08002c67 	.word	0x08002c67
 8002a00:	08002c67 	.word	0x08002c67
 8002a04:	08002a55 	.word	0x08002a55
 8002a08:	08002c67 	.word	0x08002c67
 8002a0c:	08002c67 	.word	0x08002c67
 8002a10:	08002c67 	.word	0x08002c67
 8002a14:	08002c67 	.word	0x08002c67
 8002a18:	08002c67 	.word	0x08002c67
 8002a1c:	08002c67 	.word	0x08002c67
 8002a20:	08002c67 	.word	0x08002c67
 8002a24:	08002a5b 	.word	0x08002a5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a28:	4b94      	ldr	r3, [pc, #592]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a34:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	4a90      	ldr	r2, [pc, #576]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a46:	e111      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a48:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a4a:	61bb      	str	r3, [r7, #24]
      break;
 8002a4c:	e10e      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a50:	61bb      	str	r3, [r7, #24]
      break;
 8002a52:	e10b      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a54:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a56:	61bb      	str	r3, [r7, #24]
      break;
 8002a58:	e108      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a64:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a70:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a7a:	4b80      	ldr	r3, [pc, #512]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80e1 	beq.w	8002c60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	f000 8083 	beq.w	8002bac <HAL_RCC_GetSysClockFreq+0x204>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f200 80a1 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x248>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x114>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d056      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aba:	e099      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002abc:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02d      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ac8:	4b6c      	ldr	r3, [pc, #432]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	4a6b      	ldr	r2, [pc, #428]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af2:	4b62      	ldr	r3, [pc, #392]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b22:	e087      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b36:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b66:	e065      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002baa:	e043      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bee:	e021      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c02:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	0a5b      	lsrs	r3, r3, #9
 8002c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c3e:	3301      	adds	r3, #1
 8002c40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c58:	ee17 3a90 	vmov	r3, s15
 8002c5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c5e:	e005      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
      break;
 8002c64:	e002      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c68:	61bb      	str	r3, [r7, #24]
      break;
 8002c6a:	bf00      	nop
  }

  return sysclockfreq;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	03d09000 	.word	0x03d09000
 8002c84:	003d0900 	.word	0x003d0900
 8002c88:	007a1200 	.word	0x007a1200
 8002c8c:	46000000 	.word	0x46000000
 8002c90:	4c742400 	.word	0x4c742400
 8002c94:	4a742400 	.word	0x4a742400
 8002c98:	4af42400 	.word	0x4af42400

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ca2:	f7ff fe81 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <HAL_RCC_GetHCLKFreq+0x50>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490f      	ldr	r1, [pc, #60]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_GetHCLKFreq+0x50>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cda:	4a07      	ldr	r2, [pc, #28]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	08005cfc 	.word	0x08005cfc
 8002cf4:	24000004 	.word	0x24000004
 8002cf8:	24000000 	.word	0x24000000

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d00:	f7ff ffcc 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	58024400 	.word	0x58024400
 8002d24:	08005cfc 	.word	0x08005cfc

08002d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d2c:	f7ff ffb6 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	58024400 	.word	0x58024400
 8002d50:	08005cfc 	.word	0x08005cfc

08002d54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d58:	b0c6      	sub	sp, #280	; 0x118
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002d78:	2500      	movs	r5, #0
 8002d7a:	ea54 0305 	orrs.w	r3, r4, r5
 8002d7e:	d049      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d8a:	d02f      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d90:	d828      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d96:	d01a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9c:	d822      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da6:	d007      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002da8:	e01c      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002daa:	4bab      	ldr	r3, [pc, #684]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4aaa      	ldr	r2, [pc, #680]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002db6:	e01a      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fc25 	bl	8004610 <RCCEx_PLL2_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dcc:	e00f      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dd2:	3328      	adds	r3, #40	; 0x28
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fccc 	bl	8004774 <RCCEx_PLL3_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002de2:	e004      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002dea:	e000      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002df6:	4b98      	ldr	r3, [pc, #608]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e04:	4a94      	ldr	r2, [pc, #592]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e06:	430b      	orrs	r3, r1
 8002e08:	6513      	str	r3, [r2, #80]	; 0x50
 8002e0a:	e003      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002e20:	f04f 0900 	mov.w	r9, #0
 8002e24:	ea58 0309 	orrs.w	r3, r8, r9
 8002e28:	d047      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d82a      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e51 	.word	0x08002e51
 8002e40:	08002e5f 	.word	0x08002e5f
 8002e44:	08002e75 	.word	0x08002e75
 8002e48:	08002e93 	.word	0x08002e93
 8002e4c:	08002e93 	.word	0x08002e93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e50:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	4a80      	ldr	r2, [pc, #512]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e01a      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e62:	3308      	adds	r3, #8
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fbd2 	bl	8004610 <RCCEx_PLL2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e72:	e00f      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e78:	3328      	adds	r3, #40	; 0x28
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 fc79 	bl	8004774 <RCCEx_PLL3_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e88:	e004      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e90:	e000      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e9c:	4b6e      	ldr	r3, [pc, #440]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea0:	f023 0107 	bic.w	r1, r3, #7
 8002ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	4a6b      	ldr	r2, [pc, #428]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6513      	str	r3, [r2, #80]	; 0x50
 8002eb0:	e003      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002eb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002ec6:	f04f 0b00 	mov.w	fp, #0
 8002eca:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ed8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002edc:	d03b      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002ede:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002ee2:	d834      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ee8:	d037      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eee:	d82e      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ef0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ef4:	d033      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002efa:	d828      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f00:	d01a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f06:	d822      	bhi.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f10:	d007      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f12:	e01c      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f20:	e01e      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f26:	3308      	adds	r3, #8
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f001 fb70 	bl	8004610 <RCCEx_PLL2_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f36:	e013      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f3c:	3328      	adds	r3, #40	; 0x28
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 fc17 	bl	8004774 <RCCEx_PLL3_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f4c:	e008      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f54:	e004      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f78:	4a37      	ldr	r2, [pc, #220]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f7e:	e003      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002f9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	d05d      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fb0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fb4:	d03b      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002fb6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fba:	d834      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc0:	d037      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc6:	d82e      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fcc:	d033      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002fce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fd2:	d828      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fd8:	d01a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fde:	d822      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d007      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002fea:	e01c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ff8:	e01e      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ffe:	3308      	adds	r3, #8
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fb04 	bl	8004610 <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800300e:	e013      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003014:	3328      	adds	r3, #40	; 0x28
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f001 fbab 	bl	8004774 <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003024:	e008      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800302c:	e004      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003038:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10d      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800304c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003050:	4a01      	ldr	r2, [pc, #4]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003052:	430b      	orrs	r3, r1
 8003054:	6593      	str	r3, [r2, #88]	; 0x58
 8003056:	e005      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003060:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003070:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800307a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800307e:	460b      	mov	r3, r1
 8003080:	4313      	orrs	r3, r2
 8003082:	d03a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	2b30      	cmp	r3, #48	; 0x30
 800308c:	d01f      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800308e:	2b30      	cmp	r3, #48	; 0x30
 8003090:	d819      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003092:	2b20      	cmp	r3, #32
 8003094:	d00c      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003096:	2b20      	cmp	r3, #32
 8003098:	d815      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d019      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d111      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a2:	4baa      	ldr	r3, [pc, #680]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	4aa9      	ldr	r2, [pc, #676]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030ae:	e011      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030b4:	3308      	adds	r3, #8
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 faa9 	bl	8004610 <RCCEx_PLL2_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80030d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030dc:	4b9b      	ldr	r3, [pc, #620]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80030e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	4a98      	ldr	r2, [pc, #608]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030ec:	430b      	orrs	r3, r1
 80030ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030f0:	e003      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003110:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003114:	460b      	mov	r3, r1
 8003116:	4313      	orrs	r3, r2
 8003118:	d051      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800311a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003124:	d035      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312a:	d82e      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800312c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003130:	d031      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003132:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003136:	d828      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313c:	d01a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003142:	d822      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d007      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800314e:	e01c      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003150:	4b7e      	ldr	r3, [pc, #504]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800315c:	e01c      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800315e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003162:	3308      	adds	r3, #8
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fa52 	bl	8004610 <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003172:	e011      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003178:	3328      	adds	r3, #40	; 0x28
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f001 faf9 	bl	8004774 <RCCEx_PLL3_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003190:	e002      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003196:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003198:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031a0:	4b6a      	ldr	r3, [pc, #424]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80031a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	4a67      	ldr	r2, [pc, #412]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6513      	str	r3, [r2, #80]	; 0x50
 80031b4:	e003      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80031d8:	460b      	mov	r3, r1
 80031da:	4313      	orrs	r3, r2
 80031dc:	d053      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e8:	d033      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ee:	d82c      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80031f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f4:	d02f      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80031f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031fa:	d826      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80031fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003200:	d02b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003202:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003206:	d820      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800320c:	d012      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800320e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003212:	d81a      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d022      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d115      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800321e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003222:	3308      	adds	r3, #8
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f001 f9f2 	bl	8004610 <RCCEx_PLL2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003232:	e015      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003238:	3328      	adds	r3, #40	; 0x28
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f001 fa99 	bl	8004774 <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003248:	e00a      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003250:	e006      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003252:	bf00      	nop
 8003254:	e004      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003256:	bf00      	nop
 8003258:	e002      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800325e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003260:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003268:	4b38      	ldr	r3, [pc, #224]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	4a35      	ldr	r2, [pc, #212]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003278:	430b      	orrs	r3, r1
 800327a:	6513      	str	r3, [r2, #80]	; 0x50
 800327c:	e003      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003282:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800329c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032a0:	460b      	mov	r3, r1
 80032a2:	4313      	orrs	r3, r2
 80032a4:	d058      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b2:	d033      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80032b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b8:	d82c      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d02f      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d826      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032ca:	d02b      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80032cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032d0:	d820      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d6:	d012      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d81a      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d022      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e6:	d115      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032ec:	3308      	adds	r3, #8
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 f98d 	bl	8004610 <RCCEx_PLL2_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032fc:	e015      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003302:	3328      	adds	r3, #40	; 0x28
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fa34 	bl	8004774 <RCCEx_PLL3_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003312:	e00a      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800331a:	e006      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800331c:	bf00      	nop
 800331e:	e004      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003320:	bf00      	nop
 8003322:	e002      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003324:	bf00      	nop
 8003326:	e000      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800332a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800333a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800333e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003342:	4a02      	ldr	r2, [pc, #8]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003344:	430b      	orrs	r3, r1
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
 8003348:	e006      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800334a:	bf00      	nop
 800334c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003350:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003354:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800336e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003372:	460b      	mov	r3, r1
 8003374:	4313      	orrs	r3, r2
 8003376:	d037      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800337c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003382:	d00e      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003388:	d816      	bhi.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800338e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003392:	d111      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003394:	4bc4      	ldr	r3, [pc, #784]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4ac3      	ldr	r2, [pc, #780]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033a0:	e00f      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033a6:	3308      	adds	r3, #8
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 f930 	bl	8004610 <RCCEx_PLL2_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80033c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ca:	4bb7      	ldr	r3, [pc, #732]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d8:	4ab3      	ldr	r2, [pc, #716]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033da:	430b      	orrs	r3, r1
 80033dc:	6513      	str	r3, [r2, #80]	; 0x50
 80033de:	e003      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80033f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003402:	460b      	mov	r3, r1
 8003404:	4313      	orrs	r3, r2
 8003406:	d039      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800340e:	2b03      	cmp	r3, #3
 8003410:	d81c      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003412:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	08003455 	.word	0x08003455
 800341c:	08003429 	.word	0x08003429
 8003420:	08003437 	.word	0x08003437
 8003424:	08003455 	.word	0x08003455
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003428:	4b9f      	ldr	r3, [pc, #636]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4a9e      	ldr	r2, [pc, #632]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003434:	e00f      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800343a:	3308      	adds	r3, #8
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f001 f8e6 	bl	8004610 <RCCEx_PLL2_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800344a:	e004      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003456:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800345e:	4b92      	ldr	r3, [pc, #584]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	f023 0103 	bic.w	r1, r3, #3
 8003466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	4a8e      	ldr	r2, [pc, #568]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800346e:	430b      	orrs	r3, r1
 8003470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003472:	e003      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003478:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800347c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003492:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003496:	460b      	mov	r3, r1
 8003498:	4313      	orrs	r3, r2
 800349a:	f000 8099 	beq.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800349e:	4b83      	ldr	r3, [pc, #524]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a82      	ldr	r2, [pc, #520]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034aa:	f7fd fd8b 	bl	8000fc4 <HAL_GetTick>
 80034ae:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034b2:	e00b      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b4:	f7fd fd86 	bl	8000fc4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b64      	cmp	r3, #100	; 0x64
 80034c2:	d903      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034cc:	4b77      	ldr	r3, [pc, #476]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ed      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80034d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d173      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034e0:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034ec:	4053      	eors	r3, r2
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d015      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003502:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a68      	ldr	r2, [pc, #416]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800350e:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a65      	ldr	r2, [pc, #404]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800351a:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800351c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800352a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352e:	d118      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fd fd48 	bl	8000fc4 <HAL_GetTick>
 8003534:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003538:	e00d      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fd fd43 	bl	8000fc4 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003544:	1ad2      	subs	r2, r2, r3
 8003546:	f241 3388 	movw	r3, #5000	; 0x1388
 800354a:	429a      	cmp	r2, r3
 800354c:	d903      	bls.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003554:	e005      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0eb      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003562:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003566:	2b00      	cmp	r3, #0
 8003568:	d129      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800356e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357a:	d10e      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800357c:	4b4a      	ldr	r3, [pc, #296]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800358c:	091a      	lsrs	r2, r3, #4
 800358e:	4b48      	ldr	r3, [pc, #288]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003590:	4013      	ands	r3, r2
 8003592:	4a45      	ldr	r2, [pc, #276]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6113      	str	r3, [r2, #16]
 8003598:	e005      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	4a42      	ldr	r2, [pc, #264]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035a4:	6113      	str	r3, [r2, #16]
 80035a6:	4b40      	ldr	r3, [pc, #256]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80035aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b6:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 0301 	and.w	r3, r2, #1
 80035dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f000 808f 	beq.w	8003710 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f8:	2b28      	cmp	r3, #40	; 0x28
 80035fa:	d871      	bhi.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	080036e9 	.word	0x080036e9
 8003608:	080036e1 	.word	0x080036e1
 800360c:	080036e1 	.word	0x080036e1
 8003610:	080036e1 	.word	0x080036e1
 8003614:	080036e1 	.word	0x080036e1
 8003618:	080036e1 	.word	0x080036e1
 800361c:	080036e1 	.word	0x080036e1
 8003620:	080036e1 	.word	0x080036e1
 8003624:	080036b5 	.word	0x080036b5
 8003628:	080036e1 	.word	0x080036e1
 800362c:	080036e1 	.word	0x080036e1
 8003630:	080036e1 	.word	0x080036e1
 8003634:	080036e1 	.word	0x080036e1
 8003638:	080036e1 	.word	0x080036e1
 800363c:	080036e1 	.word	0x080036e1
 8003640:	080036e1 	.word	0x080036e1
 8003644:	080036cb 	.word	0x080036cb
 8003648:	080036e1 	.word	0x080036e1
 800364c:	080036e1 	.word	0x080036e1
 8003650:	080036e1 	.word	0x080036e1
 8003654:	080036e1 	.word	0x080036e1
 8003658:	080036e1 	.word	0x080036e1
 800365c:	080036e1 	.word	0x080036e1
 8003660:	080036e1 	.word	0x080036e1
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036e1 	.word	0x080036e1
 800366c:	080036e1 	.word	0x080036e1
 8003670:	080036e1 	.word	0x080036e1
 8003674:	080036e1 	.word	0x080036e1
 8003678:	080036e1 	.word	0x080036e1
 800367c:	080036e1 	.word	0x080036e1
 8003680:	080036e1 	.word	0x080036e1
 8003684:	080036e9 	.word	0x080036e9
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036e1 	.word	0x080036e1
 8003690:	080036e1 	.word	0x080036e1
 8003694:	080036e1 	.word	0x080036e1
 8003698:	080036e1 	.word	0x080036e1
 800369c:	080036e1 	.word	0x080036e1
 80036a0:	080036e1 	.word	0x080036e1
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	58024400 	.word	0x58024400
 80036ac:	58024800 	.word	0x58024800
 80036b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b8:	3308      	adds	r3, #8
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 ffa7 	bl	8004610 <RCCEx_PLL2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036c8:	e00f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ce:	3328      	adds	r3, #40	; 0x28
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f84e 	bl	8004774 <RCCEx_PLL3_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036de:	e004      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036e6:	e000      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80036e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036f2:	4bbf      	ldr	r3, [pc, #764]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80036fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003700:	4abb      	ldr	r2, [pc, #748]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003702:	430b      	orrs	r3, r1
 8003704:	6553      	str	r3, [r2, #84]	; 0x54
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800370c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f002 0302 	and.w	r3, r2, #2
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003726:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d041      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	2b05      	cmp	r3, #5
 8003738:	d824      	bhi.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	0800378d 	.word	0x0800378d
 8003744:	08003759 	.word	0x08003759
 8003748:	0800376f 	.word	0x0800376f
 800374c:	0800378d 	.word	0x0800378d
 8003750:	0800378d 	.word	0x0800378d
 8003754:	0800378d 	.word	0x0800378d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800375c:	3308      	adds	r3, #8
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f000 ff55 	bl	8004610 <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800376c:	e00f      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003772:	3328      	adds	r3, #40	; 0x28
 8003774:	2101      	movs	r1, #1
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fffc 	bl	8004774 <RCCEx_PLL3_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003782:	e004      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800378a:	e000      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003796:	4b96      	ldr	r3, [pc, #600]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f023 0107 	bic.w	r1, r3, #7
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	4a92      	ldr	r2, [pc, #584]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6553      	str	r3, [r2, #84]	; 0x54
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f002 0304 	and.w	r3, r2, #4
 80037c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d044      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d825      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	08003835 	.word	0x08003835
 80037ec:	08003801 	.word	0x08003801
 80037f0:	08003817 	.word	0x08003817
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003835 	.word	0x08003835
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003804:	3308      	adds	r3, #8
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ff01 	bl	8004610 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003814:	e00f      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800381a:	3328      	adds	r3, #40	; 0x28
 800381c:	2101      	movs	r1, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ffa8 	bl	8004774 <RCCEx_PLL3_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800382a:	e004      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003836:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800383e:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f023 0107 	bic.w	r1, r3, #7
 8003846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a68      	ldr	r2, [pc, #416]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003850:	430b      	orrs	r3, r1
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	e003      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003856:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800385a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800385e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f002 0320 	and.w	r3, r2, #32
 800386a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003874:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003878:	460b      	mov	r3, r1
 800387a:	4313      	orrs	r3, r2
 800387c:	d055      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800387e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388a:	d033      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800388c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003890:	d82c      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d826      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800389e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038a2:	d02b      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80038a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038a8:	d820      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ae:	d012      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80038b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b4:	d81a      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d022      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80038ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038be:	d115      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c4:	3308      	adds	r3, #8
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fea1 	bl	8004610 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038d4:	e015      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038da:	3328      	adds	r3, #40	; 0x28
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ff48 	bl	8004774 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038ea:	e00a      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80038f2:	e006      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80038f4:	bf00      	nop
 80038f6:	e004      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80038f8:	bf00      	nop
 80038fa:	e002      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80038fc:	bf00      	nop
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003902:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800390a:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6553      	str	r3, [r2, #84]	; 0x54
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003926:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003936:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003940:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d058      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800394a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003952:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003956:	d033      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003958:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800395c:	d82c      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d02f      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d826      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800396a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800396e:	d02b      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003974:	d820      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d012      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800397c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003980:	d81a      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d022      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398a:	d115      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003990:	3308      	adds	r3, #8
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fe3b 	bl	8004610 <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039a0:	e015      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a6:	3328      	adds	r3, #40	; 0x28
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fee2 	bl	8004774 <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039b6:	e00a      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039be:	e006      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039c0:	bf00      	nop
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10e      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e6:	4a02      	ldr	r2, [pc, #8]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a16:	460b      	mov	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	d055      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a28:	d033      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003a2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a2e:	d82c      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a34:	d02f      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003a36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3a:	d826      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a40:	d02b      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003a42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a46:	d820      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a4c:	d012      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a52:	d81a      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a62:	3308      	adds	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fdd2 	bl	8004610 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a72:	e015      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a78:	3328      	adds	r3, #40	; 0x28
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fe79 	bl	8004774 <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003aa8:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab8:	4a9c      	ldr	r2, [pc, #624]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6593      	str	r3, [r2, #88]	; 0x58
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ac4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 0308 	and.w	r3, r2, #8
 8003ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ade:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d01e      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003afa:	3328      	adds	r3, #40	; 0x28
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fe38 	bl	8004774 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003b10:	4b86      	ldr	r3, [pc, #536]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b20:	4a82      	ldr	r2, [pc, #520]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f002 0310 	and.w	r3, r2, #16
 8003b32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b3c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b40:	460b      	mov	r3, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d01e      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b58:	3328      	adds	r3, #40	; 0x28
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fe09 	bl	8004774 <RCCEx_PLL3_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b6e:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7e:	4a6b      	ldr	r2, [pc, #428]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b92:	2300      	movs	r3, #0
 8003b94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b96:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d03e      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ba4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bac:	d022      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb2:	d81b      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003bbe:	e015      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fd21 	bl	8004610 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bd4:	e00f      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bda:	3328      	adds	r3, #40	; 0x28
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fdc8 	bl	8004774 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bea:	e004      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bfe:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c0e:	4a47      	ldr	r2, [pc, #284]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6593      	str	r3, [r2, #88]	; 0x58
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c2a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d03b      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c46:	d01f      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003c48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c4c:	d818      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d003      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c58:	d007      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003c5a:	e011      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a32      	ldr	r2, [pc, #200]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c68:	e00f      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c6e:	3328      	adds	r3, #40	; 0x28
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fd7e 	bl	8004774 <RCCEx_PLL3_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca2:	4a22      	ldr	r2, [pc, #136]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cc4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d034      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cdc:	d007      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003cde:	e011      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cec:	e00e      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fc8a 	bl	8004610 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	4a02      	ldr	r2, [pc, #8]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d28:	e006      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003d2a:	bf00      	nop
 8003d2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003d44:	663b      	str	r3, [r7, #96]	; 0x60
 8003d46:	2300      	movs	r3, #0
 8003d48:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d00c      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d58:	3328      	adds	r3, #40	; 0x28
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fd09 	bl	8004774 <RCCEx_PLL3_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d84:	460b      	mov	r3, r1
 8003d86:	4313      	orrs	r3, r2
 8003d88:	d036      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d94:	d018      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9a:	d811      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d014      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d80b      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d011      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db0:	d106      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db2:	4bb7      	ldr	r3, [pc, #732]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4ab6      	ldr	r2, [pc, #728]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003dc6:	e004      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dda:	4bad      	ldr	r3, [pc, #692]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de8:	4aa9      	ldr	r2, [pc, #676]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6553      	str	r3, [r2, #84]	; 0x54
 8003dee:	e003      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003df4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003e04:	653b      	str	r3, [r7, #80]	; 0x50
 8003e06:	2300      	movs	r3, #0
 8003e08:	657b      	str	r3, [r7, #84]	; 0x54
 8003e0a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e14:	4b9e      	ldr	r3, [pc, #632]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a9b      	ldr	r2, [pc, #620]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e36:	2300      	movs	r3, #0
 8003e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e44:	4b92      	ldr	r3, [pc, #584]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e52:	4a8f      	ldr	r2, [pc, #572]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
 8003e66:	2300      	movs	r3, #0
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e74:	4b86      	ldr	r3, [pc, #536]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	4a85      	ldr	r2, [pc, #532]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e7e:	6113      	str	r3, [r2, #16]
 8003e80:	4b83      	ldr	r3, [pc, #524]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e82:	6919      	ldr	r1, [r3, #16]
 8003e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e8c:	4a80      	ldr	r2, [pc, #512]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003eae:	4b78      	ldr	r3, [pc, #480]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	4a74      	ldr	r2, [pc, #464]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ece:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ede:	4b6c      	ldr	r3, [pc, #432]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	4a68      	ldr	r2, [pc, #416]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	2100      	movs	r1, #0
 8003efe:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f06:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	d011      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f14:	3308      	adds	r3, #8
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fb79 	bl	8004610 <RCCEx_PLL2_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003f24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	6239      	str	r1, [r7, #32]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
 8003f46:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d011      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f54:	3308      	adds	r3, #8
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fb59 	bl	8004610 <RCCEx_PLL2_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003f64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	61b9      	str	r1, [r7, #24]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d011      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f94:	3308      	adds	r3, #8
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fb39 	bl	8004610 <RCCEx_PLL2_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6139      	str	r1, [r7, #16]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d011      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd4:	3328      	adds	r3, #40	; 0x28
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fbcb 	bl	8004774 <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	d011      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004014:	3328      	adds	r3, #40	; 0x28
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fbab 	bl	8004774 <RCCEx_PLL3_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004030:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	2100      	movs	r1, #0
 800403e:	6039      	str	r1, [r7, #0]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e9d7 1200 	ldrd	r1, r2, [r7]
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d011      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004054:	3328      	adds	r3, #40	; 0x28
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fb8b 	bl	8004774 <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004064:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004070:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004074:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	58024400 	.word	0x58024400

08004094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004098:	f7fe fe00 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58024400 	.word	0x58024400
 80040bc:	08005cfc 	.word	0x08005cfc

080040c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040c8:	4ba1      	ldr	r3, [pc, #644]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040d2:	4b9f      	ldr	r3, [pc, #636]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	0b1b      	lsrs	r3, r3, #12
 80040d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040de:	4b9c      	ldr	r3, [pc, #624]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040ea:	4b99      	ldr	r3, [pc, #612]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8111 	beq.w	8004330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b02      	cmp	r3, #2
 8004112:	f000 8083 	beq.w	800421c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b02      	cmp	r3, #2
 800411a:	f200 80a1 	bhi.w	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d056      	beq.n	80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800412a:	e099      	b.n	8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800412c:	4b88      	ldr	r3, [pc, #544]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02d      	beq.n	8004194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004138:	4b85      	ldr	r3, [pc, #532]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	4a84      	ldr	r2, [pc, #528]	; (8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b7b      	ldr	r3, [pc, #492]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a03 	vldr	s12, [r7, #12]
 8004176:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004192:	e087      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800435c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b6a      	ldr	r3, [pc, #424]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d6:	e065      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421a:	e043      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b48      	ldr	r3, [pc, #288]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004242:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425e:	e021      	b.n	80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a03 	vldr	s12, [r7, #12]
 8004286:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042a4:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	0a5b      	lsrs	r3, r3, #9
 80042aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042be:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	ee17 2a90 	vmov	r2, s15
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042d2:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f8:	ee17 2a90 	vmov	r2, s15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004300:	4b13      	ldr	r3, [pc, #76]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	0e1b      	lsrs	r3, r3, #24
 8004306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431a:	edd7 6a07 	vldr	s13, [r7, #28]
 800431e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004326:	ee17 2a90 	vmov	r2, s15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800432e:	e008      	b.n	8004342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
}
 8004342:	bf00      	nop
 8004344:	3724      	adds	r7, #36	; 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	03d09000 	.word	0x03d09000
 8004358:	46000000 	.word	0x46000000
 800435c:	4c742400 	.word	0x4c742400
 8004360:	4a742400 	.word	0x4a742400
 8004364:	4af42400 	.word	0x4af42400

08004368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004370:	4ba1      	ldr	r3, [pc, #644]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800437a:	4b9f      	ldr	r3, [pc, #636]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	0d1b      	lsrs	r3, r3, #20
 8004380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004386:	4b9c      	ldr	r3, [pc, #624]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004392:	4b99      	ldr	r3, [pc, #612]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8111 	beq.w	80045d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	f000 8083 	beq.w	80044c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f200 80a1 	bhi.w	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d056      	beq.n	8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043d2:	e099      	b.n	8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d4:	4b88      	ldr	r3, [pc, #544]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02d      	beq.n	800443c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043e0:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	4a84      	ldr	r2, [pc, #528]	; (80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	ee07 3a90 	vmov	s15, r3
 8004402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440a:	4b7b      	ldr	r3, [pc, #492]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441a:	ed97 6a03 	vldr	s12, [r7, #12]
 800441e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800443a:	e087      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800447e:	e065      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c2:	e043      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800460c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004506:	e021      	b.n	800454c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004566:	edd7 6a07 	vldr	s13, [r7, #28]
 800456a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004572:	ee17 2a90 	vmov	r2, s15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004594:	edd7 6a07 	vldr	s13, [r7, #28]
 8004598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800459c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a0:	ee17 2a90 	vmov	r2, s15
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	ee17 2a90 	vmov	r2, s15
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
}
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	03d09000 	.word	0x03d09000
 8004600:	46000000 	.word	0x46000000
 8004604:	4c742400 	.word	0x4c742400
 8004608:	4a742400 	.word	0x4a742400
 800460c:	4af42400 	.word	0x4af42400

08004610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800461e:	4b53      	ldr	r3, [pc, #332]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d101      	bne.n	800462e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e099      	b.n	8004762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4e      	ldr	r2, [pc, #312]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463a:	f7fc fcc3 	bl	8000fc4 <HAL_GetTick>
 800463e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004640:	e008      	b.n	8004654 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004642:	f7fc fcbf 	bl	8000fc4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e086      	b.n	8004762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004654:	4b45      	ldr	r3, [pc, #276]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004660:	4b42      	ldr	r3, [pc, #264]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	031b      	lsls	r3, r3, #12
 800466e:	493f      	ldr	r1, [pc, #252]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	628b      	str	r3, [r1, #40]	; 0x28
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	3b01      	subs	r3, #1
 800467a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	3b01      	subs	r3, #1
 8004684:	025b      	lsls	r3, r3, #9
 8004686:	b29b      	uxth	r3, r3
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	3b01      	subs	r3, #1
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	3b01      	subs	r3, #1
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046a4:	4931      	ldr	r1, [pc, #196]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046aa:	4b30      	ldr	r3, [pc, #192]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	492d      	ldr	r1, [pc, #180]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	f023 0220 	bic.w	r2, r3, #32
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	4928      	ldr	r1, [pc, #160]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046ce:	4b27      	ldr	r3, [pc, #156]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	4a26      	ldr	r2, [pc, #152]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046d4:	f023 0310 	bic.w	r3, r3, #16
 80046d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <RCCEx_PLL2_Config+0x160>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	69d2      	ldr	r2, [r2, #28]
 80046e6:	00d2      	lsls	r2, r2, #3
 80046e8:	4920      	ldr	r1, [pc, #128]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046ee:	4b1f      	ldr	r3, [pc, #124]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	4a1e      	ldr	r2, [pc, #120]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 80046f4:	f043 0310 	orr.w	r3, r3, #16
 80046f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800470a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800470c:	e00f      	b.n	800472e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004720:	e005      	b.n	800472e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	4a11      	ldr	r2, [pc, #68]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800472c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800472e:	4b0f      	ldr	r3, [pc, #60]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a0e      	ldr	r2, [pc, #56]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473a:	f7fc fc43 	bl	8000fc4 <HAL_GetTick>
 800473e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004740:	e008      	b.n	8004754 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004742:	f7fc fc3f 	bl	8000fc4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e006      	b.n	8004762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <RCCEx_PLL2_Config+0x15c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
 8004770:	ffff0007 	.word	0xffff0007

08004774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004782:	4b53      	ldr	r3, [pc, #332]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b03      	cmp	r3, #3
 800478c:	d101      	bne.n	8004792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e099      	b.n	80048c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004792:	4b4f      	ldr	r3, [pc, #316]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4e      	ldr	r2, [pc, #312]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479e:	f7fc fc11 	bl	8000fc4 <HAL_GetTick>
 80047a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047a6:	f7fc fc0d 	bl	8000fc4 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e086      	b.n	80048c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047b8:	4b45      	ldr	r3, [pc, #276]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f0      	bne.n	80047a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	051b      	lsls	r3, r3, #20
 80047d2:	493f      	ldr	r1, [pc, #252]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	628b      	str	r3, [r1, #40]	; 0x28
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	3b01      	subs	r3, #1
 80047de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	025b      	lsls	r3, r3, #9
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	3b01      	subs	r3, #1
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004808:	4931      	ldr	r1, [pc, #196]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800480e:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	492d      	ldr	r1, [pc, #180]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004820:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4928      	ldr	r1, [pc, #160]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004832:	4b27      	ldr	r3, [pc, #156]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800483c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <RCCEx_PLL3_Config+0x160>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	69d2      	ldr	r2, [r2, #28]
 800484a:	00d2      	lsls	r2, r2, #3
 800484c:	4920      	ldr	r1, [pc, #128]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004852:	4b1f      	ldr	r3, [pc, #124]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800486a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800486e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004870:	e00f      	b.n	8004892 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004878:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800487e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004884:	e005      	b.n	8004892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	4a11      	ldr	r2, [pc, #68]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 800488c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004892:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a0e      	ldr	r2, [pc, #56]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 8004898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489e:	f7fc fb91 	bl	8000fc4 <HAL_GetTick>
 80048a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048a6:	f7fc fb8d 	bl	8000fc4 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e006      	b.n	80048c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <RCCEx_PLL3_Config+0x15c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	ffff0007 	.word	0xffff0007

080048d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e042      	b.n	8004970 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fc fa3f 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2224      	movs	r2, #36	; 0x24
 8004906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f82c 	bl	8004978 <UART_SetConfig>
 8004920:	4603      	mov	r3, r0
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e022      	b.n	8004970 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fe8c 	bl	8005650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 ff13 	bl	8005794 <UART_CheckIdleState>
 800496e:	4603      	mov	r3, r0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b092      	sub	sp, #72	; 0x48
 800497e:	af00      	add	r7, sp, #0
 8004980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	431a      	orrs	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	431a      	orrs	r2, r3
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	4313      	orrs	r3, r2
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4bbe      	ldr	r3, [pc, #760]	; (8004ca0 <UART_SetConfig+0x328>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4ab3      	ldr	r2, [pc, #716]	; (8004ca4 <UART_SetConfig+0x32c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	4313      	orrs	r3, r2
 80049e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	4baf      	ldr	r3, [pc, #700]	; (8004ca8 <UART_SetConfig+0x330>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049f4:	430b      	orrs	r3, r1
 80049f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	f023 010f 	bic.w	r1, r3, #15
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4aa6      	ldr	r2, [pc, #664]	; (8004cac <UART_SetConfig+0x334>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d177      	bne.n	8004b08 <UART_SetConfig+0x190>
 8004a18:	4ba5      	ldr	r3, [pc, #660]	; (8004cb0 <UART_SetConfig+0x338>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a20:	2b28      	cmp	r3, #40	; 0x28
 8004a22:	d86d      	bhi.n	8004b00 <UART_SetConfig+0x188>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <UART_SetConfig+0xb4>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004ad1 	.word	0x08004ad1
 8004a30:	08004b01 	.word	0x08004b01
 8004a34:	08004b01 	.word	0x08004b01
 8004a38:	08004b01 	.word	0x08004b01
 8004a3c:	08004b01 	.word	0x08004b01
 8004a40:	08004b01 	.word	0x08004b01
 8004a44:	08004b01 	.word	0x08004b01
 8004a48:	08004b01 	.word	0x08004b01
 8004a4c:	08004ad9 	.word	0x08004ad9
 8004a50:	08004b01 	.word	0x08004b01
 8004a54:	08004b01 	.word	0x08004b01
 8004a58:	08004b01 	.word	0x08004b01
 8004a5c:	08004b01 	.word	0x08004b01
 8004a60:	08004b01 	.word	0x08004b01
 8004a64:	08004b01 	.word	0x08004b01
 8004a68:	08004b01 	.word	0x08004b01
 8004a6c:	08004ae1 	.word	0x08004ae1
 8004a70:	08004b01 	.word	0x08004b01
 8004a74:	08004b01 	.word	0x08004b01
 8004a78:	08004b01 	.word	0x08004b01
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004b01 	.word	0x08004b01
 8004a84:	08004b01 	.word	0x08004b01
 8004a88:	08004b01 	.word	0x08004b01
 8004a8c:	08004ae9 	.word	0x08004ae9
 8004a90:	08004b01 	.word	0x08004b01
 8004a94:	08004b01 	.word	0x08004b01
 8004a98:	08004b01 	.word	0x08004b01
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004b01 	.word	0x08004b01
 8004aa4:	08004b01 	.word	0x08004b01
 8004aa8:	08004b01 	.word	0x08004b01
 8004aac:	08004af1 	.word	0x08004af1
 8004ab0:	08004b01 	.word	0x08004b01
 8004ab4:	08004b01 	.word	0x08004b01
 8004ab8:	08004b01 	.word	0x08004b01
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004b01 	.word	0x08004b01
 8004ac8:	08004b01 	.word	0x08004b01
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad6:	e326      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ade:	e322      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004ae0:	2308      	movs	r3, #8
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ae6:	e31e      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004ae8:	2310      	movs	r3, #16
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aee:	e31a      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004af0:	2320      	movs	r3, #32
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e316      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004af8:	2340      	movs	r3, #64	; 0x40
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e312      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e30e      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a69      	ldr	r2, [pc, #420]	; (8004cb4 <UART_SetConfig+0x33c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d130      	bne.n	8004b74 <UART_SetConfig+0x1fc>
 8004b12:	4b67      	ldr	r3, [pc, #412]	; (8004cb0 <UART_SetConfig+0x338>)
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d826      	bhi.n	8004b6c <UART_SetConfig+0x1f4>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <UART_SetConfig+0x1ac>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b45 	.word	0x08004b45
 8004b2c:	08004b4d 	.word	0x08004b4d
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b42:	e2f0      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4a:	e2ec      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b52:	e2e8      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5a:	e2e4      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b62:	e2e0      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b64:	2340      	movs	r3, #64	; 0x40
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e2dc      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b72:	e2d8      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a4f      	ldr	r2, [pc, #316]	; (8004cb8 <UART_SetConfig+0x340>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d130      	bne.n	8004be0 <UART_SetConfig+0x268>
 8004b7e:	4b4c      	ldr	r3, [pc, #304]	; (8004cb0 <UART_SetConfig+0x338>)
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d826      	bhi.n	8004bd8 <UART_SetConfig+0x260>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x218>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba9 	.word	0x08004ba9
 8004b94:	08004bb1 	.word	0x08004bb1
 8004b98:	08004bb9 	.word	0x08004bb9
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bae:	e2ba      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bb6:	e2b6      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bbe:	e2b2      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bc6:	e2ae      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004bc8:	2320      	movs	r3, #32
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bce:	e2aa      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004bd0:	2340      	movs	r3, #64	; 0x40
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd6:	e2a6      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e2a2      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <UART_SetConfig+0x344>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d130      	bne.n	8004c4c <UART_SetConfig+0x2d4>
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <UART_SetConfig+0x338>)
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d826      	bhi.n	8004c44 <UART_SetConfig+0x2cc>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0x284>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c15 	.word	0x08004c15
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	08004c25 	.word	0x08004c25
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e284      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c22:	e280      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c24:	2308      	movs	r3, #8
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2a:	e27c      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c32:	e278      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c34:	2320      	movs	r3, #32
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3a:	e274      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c42:	e270      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4a:	e26c      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <UART_SetConfig+0x348>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d142      	bne.n	8004cdc <UART_SetConfig+0x364>
 8004c56:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <UART_SetConfig+0x338>)
 8004c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d838      	bhi.n	8004cd4 <UART_SetConfig+0x35c>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x2f0>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c81 	.word	0x08004c81
 8004c6c:	08004c89 	.word	0x08004c89
 8004c70:	08004c91 	.word	0x08004c91
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004cc5 	.word	0x08004cc5
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e24e      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e24a      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c90:	2308      	movs	r3, #8
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c96:	e246      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9e:	e242      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004ca0:	cfff69f3 	.word	0xcfff69f3
 8004ca4:	58000c00 	.word	0x58000c00
 8004ca8:	11fff4ff 	.word	0x11fff4ff
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	40004c00 	.word	0x40004c00
 8004cc0:	40005000 	.word	0x40005000
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cca:	e22c      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004ccc:	2340      	movs	r3, #64	; 0x40
 8004cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd2:	e228      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004cd4:	2380      	movs	r3, #128	; 0x80
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cda:	e224      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4ab1      	ldr	r2, [pc, #708]	; (8004fa8 <UART_SetConfig+0x630>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d176      	bne.n	8004dd4 <UART_SetConfig+0x45c>
 8004ce6:	4bb1      	ldr	r3, [pc, #708]	; (8004fac <UART_SetConfig+0x634>)
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cee:	2b28      	cmp	r3, #40	; 0x28
 8004cf0:	d86c      	bhi.n	8004dcc <UART_SetConfig+0x454>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x380>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d9d 	.word	0x08004d9d
 8004cfc:	08004dcd 	.word	0x08004dcd
 8004d00:	08004dcd 	.word	0x08004dcd
 8004d04:	08004dcd 	.word	0x08004dcd
 8004d08:	08004dcd 	.word	0x08004dcd
 8004d0c:	08004dcd 	.word	0x08004dcd
 8004d10:	08004dcd 	.word	0x08004dcd
 8004d14:	08004dcd 	.word	0x08004dcd
 8004d18:	08004da5 	.word	0x08004da5
 8004d1c:	08004dcd 	.word	0x08004dcd
 8004d20:	08004dcd 	.word	0x08004dcd
 8004d24:	08004dcd 	.word	0x08004dcd
 8004d28:	08004dcd 	.word	0x08004dcd
 8004d2c:	08004dcd 	.word	0x08004dcd
 8004d30:	08004dcd 	.word	0x08004dcd
 8004d34:	08004dcd 	.word	0x08004dcd
 8004d38:	08004dad 	.word	0x08004dad
 8004d3c:	08004dcd 	.word	0x08004dcd
 8004d40:	08004dcd 	.word	0x08004dcd
 8004d44:	08004dcd 	.word	0x08004dcd
 8004d48:	08004dcd 	.word	0x08004dcd
 8004d4c:	08004dcd 	.word	0x08004dcd
 8004d50:	08004dcd 	.word	0x08004dcd
 8004d54:	08004dcd 	.word	0x08004dcd
 8004d58:	08004db5 	.word	0x08004db5
 8004d5c:	08004dcd 	.word	0x08004dcd
 8004d60:	08004dcd 	.word	0x08004dcd
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004dcd 	.word	0x08004dcd
 8004d70:	08004dcd 	.word	0x08004dcd
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004dbd 	.word	0x08004dbd
 8004d7c:	08004dcd 	.word	0x08004dcd
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004dcd 	.word	0x08004dcd
 8004d88:	08004dcd 	.word	0x08004dcd
 8004d8c:	08004dcd 	.word	0x08004dcd
 8004d90:	08004dcd 	.word	0x08004dcd
 8004d94:	08004dcd 	.word	0x08004dcd
 8004d98:	08004dc5 	.word	0x08004dc5
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da2:	e1c0      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004da4:	2304      	movs	r3, #4
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004daa:	e1bc      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004dac:	2308      	movs	r3, #8
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004db2:	e1b8      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004db4:	2310      	movs	r3, #16
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e1b4      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e1b0      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004dc4:	2340      	movs	r3, #64	; 0x40
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dca:	e1ac      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e1a8      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a75      	ldr	r2, [pc, #468]	; (8004fb0 <UART_SetConfig+0x638>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d130      	bne.n	8004e40 <UART_SetConfig+0x4c8>
 8004dde:	4b73      	ldr	r3, [pc, #460]	; (8004fac <UART_SetConfig+0x634>)
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d826      	bhi.n	8004e38 <UART_SetConfig+0x4c0>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x478>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e09 	.word	0x08004e09
 8004df4:	08004e11 	.word	0x08004e11
 8004df8:	08004e19 	.word	0x08004e19
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0e:	e18a      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e10:	2304      	movs	r3, #4
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e186      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e18:	2308      	movs	r3, #8
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1e:	e182      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e20:	2310      	movs	r3, #16
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e26:	e17e      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e2e:	e17a      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e36:	e176      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3e:	e172      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a5b      	ldr	r2, [pc, #364]	; (8004fb4 <UART_SetConfig+0x63c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d130      	bne.n	8004eac <UART_SetConfig+0x534>
 8004e4a:	4b58      	ldr	r3, [pc, #352]	; (8004fac <UART_SetConfig+0x634>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	d826      	bhi.n	8004ea4 <UART_SetConfig+0x52c>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <UART_SetConfig+0x4e4>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e75 	.word	0x08004e75
 8004e60:	08004e7d 	.word	0x08004e7d
 8004e64:	08004e85 	.word	0x08004e85
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7a:	e154      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e82:	e150      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e84:	2308      	movs	r3, #8
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8a:	e14c      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e92:	e148      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e94:	2320      	movs	r3, #32
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9a:	e144      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004e9c:	2340      	movs	r3, #64	; 0x40
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea2:	e140      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eaa:	e13c      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a41      	ldr	r2, [pc, #260]	; (8004fb8 <UART_SetConfig+0x640>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	f040 8082 	bne.w	8004fbc <UART_SetConfig+0x644>
 8004eb8:	4b3c      	ldr	r3, [pc, #240]	; (8004fac <UART_SetConfig+0x634>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec0:	2b28      	cmp	r3, #40	; 0x28
 8004ec2:	d86d      	bhi.n	8004fa0 <UART_SetConfig+0x628>
 8004ec4:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <UART_SetConfig+0x554>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f71 	.word	0x08004f71
 8004ed0:	08004fa1 	.word	0x08004fa1
 8004ed4:	08004fa1 	.word	0x08004fa1
 8004ed8:	08004fa1 	.word	0x08004fa1
 8004edc:	08004fa1 	.word	0x08004fa1
 8004ee0:	08004fa1 	.word	0x08004fa1
 8004ee4:	08004fa1 	.word	0x08004fa1
 8004ee8:	08004fa1 	.word	0x08004fa1
 8004eec:	08004f79 	.word	0x08004f79
 8004ef0:	08004fa1 	.word	0x08004fa1
 8004ef4:	08004fa1 	.word	0x08004fa1
 8004ef8:	08004fa1 	.word	0x08004fa1
 8004efc:	08004fa1 	.word	0x08004fa1
 8004f00:	08004fa1 	.word	0x08004fa1
 8004f04:	08004fa1 	.word	0x08004fa1
 8004f08:	08004fa1 	.word	0x08004fa1
 8004f0c:	08004f81 	.word	0x08004f81
 8004f10:	08004fa1 	.word	0x08004fa1
 8004f14:	08004fa1 	.word	0x08004fa1
 8004f18:	08004fa1 	.word	0x08004fa1
 8004f1c:	08004fa1 	.word	0x08004fa1
 8004f20:	08004fa1 	.word	0x08004fa1
 8004f24:	08004fa1 	.word	0x08004fa1
 8004f28:	08004fa1 	.word	0x08004fa1
 8004f2c:	08004f89 	.word	0x08004f89
 8004f30:	08004fa1 	.word	0x08004fa1
 8004f34:	08004fa1 	.word	0x08004fa1
 8004f38:	08004fa1 	.word	0x08004fa1
 8004f3c:	08004fa1 	.word	0x08004fa1
 8004f40:	08004fa1 	.word	0x08004fa1
 8004f44:	08004fa1 	.word	0x08004fa1
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004f91 	.word	0x08004f91
 8004f50:	08004fa1 	.word	0x08004fa1
 8004f54:	08004fa1 	.word	0x08004fa1
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004f99 	.word	0x08004f99
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f76:	e0d6      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7e:	e0d2      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004f80:	2308      	movs	r3, #8
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f86:	e0ce      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8e:	e0ca      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004f90:	2320      	movs	r3, #32
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f96:	e0c6      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004f98:	2340      	movs	r3, #64	; 0x40
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e0c2      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e0be      	b.n	8005126 <UART_SetConfig+0x7ae>
 8004fa8:	40011400 	.word	0x40011400
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	40007800 	.word	0x40007800
 8004fb4:	40007c00 	.word	0x40007c00
 8004fb8:	40011800 	.word	0x40011800
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4aad      	ldr	r2, [pc, #692]	; (8005278 <UART_SetConfig+0x900>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d176      	bne.n	80050b4 <UART_SetConfig+0x73c>
 8004fc6:	4bad      	ldr	r3, [pc, #692]	; (800527c <UART_SetConfig+0x904>)
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fce:	2b28      	cmp	r3, #40	; 0x28
 8004fd0:	d86c      	bhi.n	80050ac <UART_SetConfig+0x734>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x660>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	0800507d 	.word	0x0800507d
 8004fdc:	080050ad 	.word	0x080050ad
 8004fe0:	080050ad 	.word	0x080050ad
 8004fe4:	080050ad 	.word	0x080050ad
 8004fe8:	080050ad 	.word	0x080050ad
 8004fec:	080050ad 	.word	0x080050ad
 8004ff0:	080050ad 	.word	0x080050ad
 8004ff4:	080050ad 	.word	0x080050ad
 8004ff8:	08005085 	.word	0x08005085
 8004ffc:	080050ad 	.word	0x080050ad
 8005000:	080050ad 	.word	0x080050ad
 8005004:	080050ad 	.word	0x080050ad
 8005008:	080050ad 	.word	0x080050ad
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050ad 	.word	0x080050ad
 8005014:	080050ad 	.word	0x080050ad
 8005018:	0800508d 	.word	0x0800508d
 800501c:	080050ad 	.word	0x080050ad
 8005020:	080050ad 	.word	0x080050ad
 8005024:	080050ad 	.word	0x080050ad
 8005028:	080050ad 	.word	0x080050ad
 800502c:	080050ad 	.word	0x080050ad
 8005030:	080050ad 	.word	0x080050ad
 8005034:	080050ad 	.word	0x080050ad
 8005038:	08005095 	.word	0x08005095
 800503c:	080050ad 	.word	0x080050ad
 8005040:	080050ad 	.word	0x080050ad
 8005044:	080050ad 	.word	0x080050ad
 8005048:	080050ad 	.word	0x080050ad
 800504c:	080050ad 	.word	0x080050ad
 8005050:	080050ad 	.word	0x080050ad
 8005054:	080050ad 	.word	0x080050ad
 8005058:	0800509d 	.word	0x0800509d
 800505c:	080050ad 	.word	0x080050ad
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050ad 	.word	0x080050ad
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050ad 	.word	0x080050ad
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050a5 	.word	0x080050a5
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005082:	e050      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508a:	e04c      	b.n	8005126 <UART_SetConfig+0x7ae>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005092:	e048      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509a:	e044      	b.n	8005126 <UART_SetConfig+0x7ae>
 800509c:	2320      	movs	r3, #32
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e040      	b.n	8005126 <UART_SetConfig+0x7ae>
 80050a4:	2340      	movs	r3, #64	; 0x40
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e03c      	b.n	8005126 <UART_SetConfig+0x7ae>
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e038      	b.n	8005126 <UART_SetConfig+0x7ae>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a71      	ldr	r2, [pc, #452]	; (8005280 <UART_SetConfig+0x908>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d130      	bne.n	8005120 <UART_SetConfig+0x7a8>
 80050be:	4b6f      	ldr	r3, [pc, #444]	; (800527c <UART_SetConfig+0x904>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d826      	bhi.n	8005118 <UART_SetConfig+0x7a0>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0x758>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e9 	.word	0x080050e9
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	080050f9 	.word	0x080050f9
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005109 	.word	0x08005109
 80050e4:	08005111 	.word	0x08005111
 80050e8:	2302      	movs	r3, #2
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e01a      	b.n	8005126 <UART_SetConfig+0x7ae>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e016      	b.n	8005126 <UART_SetConfig+0x7ae>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050fe:	e012      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005106:	e00e      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005108:	2320      	movs	r3, #32
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510e:	e00a      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005116:	e006      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e002      	b.n	8005126 <UART_SetConfig+0x7ae>
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a55      	ldr	r2, [pc, #340]	; (8005280 <UART_SetConfig+0x908>)
 800512c:	4293      	cmp	r3, r2
 800512e:	f040 80f8 	bne.w	8005322 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005136:	2b20      	cmp	r3, #32
 8005138:	dc46      	bgt.n	80051c8 <UART_SetConfig+0x850>
 800513a:	2b02      	cmp	r3, #2
 800513c:	db75      	blt.n	800522a <UART_SetConfig+0x8b2>
 800513e:	3b02      	subs	r3, #2
 8005140:	2b1e      	cmp	r3, #30
 8005142:	d872      	bhi.n	800522a <UART_SetConfig+0x8b2>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x7d4>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	080051cf 	.word	0x080051cf
 8005150:	0800522b 	.word	0x0800522b
 8005154:	080051d7 	.word	0x080051d7
 8005158:	0800522b 	.word	0x0800522b
 800515c:	0800522b 	.word	0x0800522b
 8005160:	0800522b 	.word	0x0800522b
 8005164:	080051e7 	.word	0x080051e7
 8005168:	0800522b 	.word	0x0800522b
 800516c:	0800522b 	.word	0x0800522b
 8005170:	0800522b 	.word	0x0800522b
 8005174:	0800522b 	.word	0x0800522b
 8005178:	0800522b 	.word	0x0800522b
 800517c:	0800522b 	.word	0x0800522b
 8005180:	0800522b 	.word	0x0800522b
 8005184:	080051f7 	.word	0x080051f7
 8005188:	0800522b 	.word	0x0800522b
 800518c:	0800522b 	.word	0x0800522b
 8005190:	0800522b 	.word	0x0800522b
 8005194:	0800522b 	.word	0x0800522b
 8005198:	0800522b 	.word	0x0800522b
 800519c:	0800522b 	.word	0x0800522b
 80051a0:	0800522b 	.word	0x0800522b
 80051a4:	0800522b 	.word	0x0800522b
 80051a8:	0800522b 	.word	0x0800522b
 80051ac:	0800522b 	.word	0x0800522b
 80051b0:	0800522b 	.word	0x0800522b
 80051b4:	0800522b 	.word	0x0800522b
 80051b8:	0800522b 	.word	0x0800522b
 80051bc:	0800522b 	.word	0x0800522b
 80051c0:	0800522b 	.word	0x0800522b
 80051c4:	0800521d 	.word	0x0800521d
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d02a      	beq.n	8005222 <UART_SetConfig+0x8aa>
 80051cc:	e02d      	b.n	800522a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051ce:	f7fe ff61 	bl	8004094 <HAL_RCCEx_GetD3PCLK1Freq>
 80051d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051d4:	e02f      	b.n	8005236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe ff70 	bl	80040c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e4:	e027      	b.n	8005236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051e6:	f107 0318 	add.w	r3, r7, #24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff f8bc 	bl	8004368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051f4:	e01f      	b.n	8005236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <UART_SetConfig+0x904>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005202:	4b1e      	ldr	r3, [pc, #120]	; (800527c <UART_SetConfig+0x904>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	08db      	lsrs	r3, r3, #3
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <UART_SetConfig+0x90c>)
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005214:	e00f      	b.n	8005236 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <UART_SetConfig+0x90c>)
 8005218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800521a:	e00c      	b.n	8005236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800521c:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <UART_SetConfig+0x910>)
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005220:	e009      	b.n	8005236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005228:	e005      	b.n	8005236 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005234:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 81ee 	beq.w	800561a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <UART_SetConfig+0x914>)
 8005244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005248:	461a      	mov	r2, r3
 800524a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005250:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525e:	429a      	cmp	r2, r3
 8005260:	d305      	bcc.n	800526e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	429a      	cmp	r2, r3
 800526c:	d910      	bls.n	8005290 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005274:	e1d1      	b.n	800561a <UART_SetConfig+0xca2>
 8005276:	bf00      	nop
 8005278:	40011c00 	.word	0x40011c00
 800527c:	58024400 	.word	0x58024400
 8005280:	58000c00 	.word	0x58000c00
 8005284:	03d09000 	.word	0x03d09000
 8005288:	003d0900 	.word	0x003d0900
 800528c:	08005d0c 	.word	0x08005d0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005292:	2200      	movs	r2, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	60fa      	str	r2, [r7, #12]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	4ac0      	ldr	r2, [pc, #768]	; (80055a0 <UART_SetConfig+0xc28>)
 800529e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2200      	movs	r2, #0
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052b2:	f7fb f82b 	bl	800030c <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	020b      	lsls	r3, r1, #8
 80052c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052cc:	0202      	lsls	r2, r0, #8
 80052ce:	6979      	ldr	r1, [r7, #20]
 80052d0:	6849      	ldr	r1, [r1, #4]
 80052d2:	0849      	lsrs	r1, r1, #1
 80052d4:	2000      	movs	r0, #0
 80052d6:	460c      	mov	r4, r1
 80052d8:	4605      	mov	r5, r0
 80052da:	eb12 0804 	adds.w	r8, r2, r4
 80052de:	eb43 0905 	adc.w	r9, r3, r5
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	469a      	mov	sl, r3
 80052ea:	4693      	mov	fp, r2
 80052ec:	4652      	mov	r2, sl
 80052ee:	465b      	mov	r3, fp
 80052f0:	4640      	mov	r0, r8
 80052f2:	4649      	mov	r1, r9
 80052f4:	f7fb f80a 	bl	800030c <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005306:	d308      	bcc.n	800531a <UART_SetConfig+0x9a2>
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530e:	d204      	bcs.n	800531a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	e17f      	b.n	800561a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005320:	e17b      	b.n	800561a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532a:	f040 80bd 	bne.w	80054a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800532e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005332:	2b20      	cmp	r3, #32
 8005334:	dc48      	bgt.n	80053c8 <UART_SetConfig+0xa50>
 8005336:	2b00      	cmp	r3, #0
 8005338:	db7b      	blt.n	8005432 <UART_SetConfig+0xaba>
 800533a:	2b20      	cmp	r3, #32
 800533c:	d879      	bhi.n	8005432 <UART_SetConfig+0xaba>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <UART_SetConfig+0x9cc>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	080053cf 	.word	0x080053cf
 8005348:	080053d7 	.word	0x080053d7
 800534c:	08005433 	.word	0x08005433
 8005350:	08005433 	.word	0x08005433
 8005354:	080053df 	.word	0x080053df
 8005358:	08005433 	.word	0x08005433
 800535c:	08005433 	.word	0x08005433
 8005360:	08005433 	.word	0x08005433
 8005364:	080053ef 	.word	0x080053ef
 8005368:	08005433 	.word	0x08005433
 800536c:	08005433 	.word	0x08005433
 8005370:	08005433 	.word	0x08005433
 8005374:	08005433 	.word	0x08005433
 8005378:	08005433 	.word	0x08005433
 800537c:	08005433 	.word	0x08005433
 8005380:	08005433 	.word	0x08005433
 8005384:	080053ff 	.word	0x080053ff
 8005388:	08005433 	.word	0x08005433
 800538c:	08005433 	.word	0x08005433
 8005390:	08005433 	.word	0x08005433
 8005394:	08005433 	.word	0x08005433
 8005398:	08005433 	.word	0x08005433
 800539c:	08005433 	.word	0x08005433
 80053a0:	08005433 	.word	0x08005433
 80053a4:	08005433 	.word	0x08005433
 80053a8:	08005433 	.word	0x08005433
 80053ac:	08005433 	.word	0x08005433
 80053b0:	08005433 	.word	0x08005433
 80053b4:	08005433 	.word	0x08005433
 80053b8:	08005433 	.word	0x08005433
 80053bc:	08005433 	.word	0x08005433
 80053c0:	08005433 	.word	0x08005433
 80053c4:	08005425 	.word	0x08005425
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d02e      	beq.n	800542a <UART_SetConfig+0xab2>
 80053cc:	e031      	b.n	8005432 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ce:	f7fd fc95 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 80053d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053d4:	e033      	b.n	800543e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d6:	f7fd fca7 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 80053da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053dc:	e02f      	b.n	800543e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fe6c 	bl	80040c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ec:	e027      	b.n	800543e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ee:	f107 0318 	add.w	r3, r7, #24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe ffb8 	bl	8004368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053fc:	e01f      	b.n	800543e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fe:	4b69      	ldr	r3, [pc, #420]	; (80055a4 <UART_SetConfig+0xc2c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800540a:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <UART_SetConfig+0xc2c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	08db      	lsrs	r3, r3, #3
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	4a64      	ldr	r2, [pc, #400]	; (80055a8 <UART_SetConfig+0xc30>)
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800541c:	e00f      	b.n	800543e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800541e:	4b62      	ldr	r3, [pc, #392]	; (80055a8 <UART_SetConfig+0xc30>)
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005422:	e00c      	b.n	800543e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005424:	4b61      	ldr	r3, [pc, #388]	; (80055ac <UART_SetConfig+0xc34>)
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005428:	e009      	b.n	800543e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005430:	e005      	b.n	800543e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005432:	2300      	movs	r3, #0
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800543c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80ea 	beq.w	800561a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	4a55      	ldr	r2, [pc, #340]	; (80055a0 <UART_SetConfig+0xc28>)
 800544c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005450:	461a      	mov	r2, r3
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	fbb3 f3f2 	udiv	r3, r3, r2
 8005458:	005a      	lsls	r2, r3, #1
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	441a      	add	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	fbb2 f3f3 	udiv	r3, r2, r3
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	2b0f      	cmp	r3, #15
 8005470:	d916      	bls.n	80054a0 <UART_SetConfig+0xb28>
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005478:	d212      	bcs.n	80054a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	b29b      	uxth	r3, r3
 800547e:	f023 030f 	bic.w	r3, r3, #15
 8005482:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	b29a      	uxth	r2, r3
 8005490:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005492:	4313      	orrs	r3, r2
 8005494:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	e0bc      	b.n	800561a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054a6:	e0b8      	b.n	800561a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	dc4b      	bgt.n	8005548 <UART_SetConfig+0xbd0>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f2c0 8087 	blt.w	80055c4 <UART_SetConfig+0xc4c>
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	f200 8084 	bhi.w	80055c4 <UART_SetConfig+0xc4c>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0xb4c>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	0800554f 	.word	0x0800554f
 80054c8:	08005557 	.word	0x08005557
 80054cc:	080055c5 	.word	0x080055c5
 80054d0:	080055c5 	.word	0x080055c5
 80054d4:	0800555f 	.word	0x0800555f
 80054d8:	080055c5 	.word	0x080055c5
 80054dc:	080055c5 	.word	0x080055c5
 80054e0:	080055c5 	.word	0x080055c5
 80054e4:	0800556f 	.word	0x0800556f
 80054e8:	080055c5 	.word	0x080055c5
 80054ec:	080055c5 	.word	0x080055c5
 80054f0:	080055c5 	.word	0x080055c5
 80054f4:	080055c5 	.word	0x080055c5
 80054f8:	080055c5 	.word	0x080055c5
 80054fc:	080055c5 	.word	0x080055c5
 8005500:	080055c5 	.word	0x080055c5
 8005504:	0800557f 	.word	0x0800557f
 8005508:	080055c5 	.word	0x080055c5
 800550c:	080055c5 	.word	0x080055c5
 8005510:	080055c5 	.word	0x080055c5
 8005514:	080055c5 	.word	0x080055c5
 8005518:	080055c5 	.word	0x080055c5
 800551c:	080055c5 	.word	0x080055c5
 8005520:	080055c5 	.word	0x080055c5
 8005524:	080055c5 	.word	0x080055c5
 8005528:	080055c5 	.word	0x080055c5
 800552c:	080055c5 	.word	0x080055c5
 8005530:	080055c5 	.word	0x080055c5
 8005534:	080055c5 	.word	0x080055c5
 8005538:	080055c5 	.word	0x080055c5
 800553c:	080055c5 	.word	0x080055c5
 8005540:	080055c5 	.word	0x080055c5
 8005544:	080055b7 	.word	0x080055b7
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d037      	beq.n	80055bc <UART_SetConfig+0xc44>
 800554c:	e03a      	b.n	80055c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554e:	f7fd fbd5 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8005552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005554:	e03c      	b.n	80055d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005556:	f7fd fbe7 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 800555a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800555c:	e038      	b.n	80055d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fdac 	bl	80040c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800556c:	e030      	b.n	80055d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556e:	f107 0318 	add.w	r3, r7, #24
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fef8 	bl	8004368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800557c:	e028      	b.n	80055d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <UART_SetConfig+0xc2c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <UART_SetConfig+0xc2c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	08db      	lsrs	r3, r3, #3
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <UART_SetConfig+0xc30>)
 8005596:	fa22 f303 	lsr.w	r3, r2, r3
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800559c:	e018      	b.n	80055d0 <UART_SetConfig+0xc58>
 800559e:	bf00      	nop
 80055a0:	08005d0c 	.word	0x08005d0c
 80055a4:	58024400 	.word	0x58024400
 80055a8:	03d09000 	.word	0x03d09000
 80055ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80055b0:	4b24      	ldr	r3, [pc, #144]	; (8005644 <UART_SetConfig+0xccc>)
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055b4:	e00c      	b.n	80055d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055b6:	4b24      	ldr	r3, [pc, #144]	; (8005648 <UART_SetConfig+0xcd0>)
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ba:	e009      	b.n	80055d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c2:	e005      	b.n	80055d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055ce:	bf00      	nop
    }

    if (pclk != 0U)
 80055d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d021      	beq.n	800561a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <UART_SetConfig+0xcd4>)
 80055dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	085b      	lsrs	r3, r3, #1
 80055ee:	441a      	add	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d909      	bls.n	8005614 <UART_SetConfig+0xc9c>
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005606:	d205      	bcs.n	8005614 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	b29a      	uxth	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60da      	str	r2, [r3, #12]
 8005612:	e002      	b.n	800561a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2201      	movs	r2, #1
 800561e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2201      	movs	r2, #1
 8005626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2200      	movs	r2, #0
 800562e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2200      	movs	r2, #0
 8005634:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005636:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800563a:	4618      	mov	r0, r3
 800563c:	3748      	adds	r7, #72	; 0x48
 800563e:	46bd      	mov	sp, r7
 8005640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005644:	03d09000 	.word	0x03d09000
 8005648:	003d0900 	.word	0x003d0900
 800564c:	08005d0c 	.word	0x08005d0c

08005650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01a      	beq.n	8005766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800574e:	d10a      	bne.n	8005766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  }
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b098      	sub	sp, #96	; 0x60
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057a4:	f7fb fc0e 	bl	8000fc4 <HAL_GetTick>
 80057a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d12f      	bne.n	8005818 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c0:	2200      	movs	r2, #0
 80057c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f88e 	bl	80058e8 <UART_WaitOnFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d022      	beq.n	8005818 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
 80057f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e6      	bne.n	80057d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e063      	b.n	80058e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b04      	cmp	r3, #4
 8005824:	d149      	bne.n	80058ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005826:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582e:	2200      	movs	r2, #0
 8005830:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f857 	bl	80058e8 <UART_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d03c      	beq.n	80058ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	623b      	str	r3, [r7, #32]
   return(result);
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
 8005860:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60fb      	str	r3, [r7, #12]
   return(result);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	64bb      	str	r3, [r7, #72]	; 0x48
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3308      	adds	r3, #8
 8005890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005892:	61fa      	str	r2, [r7, #28]
 8005894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	617b      	str	r3, [r7, #20]
   return(result);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e012      	b.n	80058e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3758      	adds	r7, #88	; 0x58
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058f8:	e049      	b.n	800598e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d045      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fb fb5f 	bl	8000fc4 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <UART_WaitOnFlagUntilTimeout+0x30>
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e048      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d031      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b08      	cmp	r3, #8
 8005936:	d110      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2208      	movs	r2, #8
 800593e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f839 	bl	80059b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2208      	movs	r2, #8
 800594a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e029      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005968:	d111      	bne.n	800598e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f81f 	bl	80059b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e00f      	b.n	80059ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4013      	ands	r3, r2
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d0a6      	beq.n	80058fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b095      	sub	sp, #84	; 0x54
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
 80059e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e6      	bne.n	80059c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <UART_EndRxTransfer+0xc8>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e5      	bne.n	80059f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d118      	bne.n	8005a60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0310 	bic.w	r3, r3, #16
 8005a42:	647b      	str	r3, [r7, #68]	; 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a74:	bf00      	nop
 8005a76:	3754      	adds	r7, #84	; 0x54
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	effffffe 	.word	0xeffffffe

08005a84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e027      	b.n	8005aea <HAL_UARTEx_DisableFifoMode+0x66>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ac8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e02d      	b.n	8005b6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2224      	movs	r2, #36	; 0x24
 8005b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f850 	bl	8005bf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e02d      	b.n	8005be6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	; 0x24
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f812 	bl	8005bf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d108      	bne.n	8005c12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c10:	e031      	b.n	8005c76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c12:	2310      	movs	r3, #16
 8005c14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c16:	2310      	movs	r3, #16
 8005c18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	0e5b      	lsrs	r3, r3, #25
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	0f5b      	lsrs	r3, r3, #29
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	7b3a      	ldrb	r2, [r7, #12]
 8005c3e:	4911      	ldr	r1, [pc, #68]	; (8005c84 <UARTEx_SetNbDataToProcess+0x94>)
 8005c40:	5c8a      	ldrb	r2, [r1, r2]
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c46:	7b3a      	ldrb	r2, [r7, #12]
 8005c48:	490f      	ldr	r1, [pc, #60]	; (8005c88 <UARTEx_SetNbDataToProcess+0x98>)
 8005c4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
 8005c5a:	7b7a      	ldrb	r2, [r7, #13]
 8005c5c:	4909      	ldr	r1, [pc, #36]	; (8005c84 <UARTEx_SetNbDataToProcess+0x94>)
 8005c5e:	5c8a      	ldrb	r2, [r1, r2]
 8005c60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c64:	7b7a      	ldrb	r2, [r7, #13]
 8005c66:	4908      	ldr	r1, [pc, #32]	; (8005c88 <UARTEx_SetNbDataToProcess+0x98>)
 8005c68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	08005d24 	.word	0x08005d24
 8005c88:	08005d2c 	.word	0x08005d2c

08005c8c <__libc_init_array>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4d0d      	ldr	r5, [pc, #52]	; (8005cc4 <__libc_init_array+0x38>)
 8005c90:	4c0d      	ldr	r4, [pc, #52]	; (8005cc8 <__libc_init_array+0x3c>)
 8005c92:	1b64      	subs	r4, r4, r5
 8005c94:	10a4      	asrs	r4, r4, #2
 8005c96:	2600      	movs	r6, #0
 8005c98:	42a6      	cmp	r6, r4
 8005c9a:	d109      	bne.n	8005cb0 <__libc_init_array+0x24>
 8005c9c:	4d0b      	ldr	r5, [pc, #44]	; (8005ccc <__libc_init_array+0x40>)
 8005c9e:	4c0c      	ldr	r4, [pc, #48]	; (8005cd0 <__libc_init_array+0x44>)
 8005ca0:	f000 f820 	bl	8005ce4 <_init>
 8005ca4:	1b64      	subs	r4, r4, r5
 8005ca6:	10a4      	asrs	r4, r4, #2
 8005ca8:	2600      	movs	r6, #0
 8005caa:	42a6      	cmp	r6, r4
 8005cac:	d105      	bne.n	8005cba <__libc_init_array+0x2e>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb4:	4798      	blx	r3
 8005cb6:	3601      	adds	r6, #1
 8005cb8:	e7ee      	b.n	8005c98 <__libc_init_array+0xc>
 8005cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbe:	4798      	blx	r3
 8005cc0:	3601      	adds	r6, #1
 8005cc2:	e7f2      	b.n	8005caa <__libc_init_array+0x1e>
 8005cc4:	08005d3c 	.word	0x08005d3c
 8005cc8:	08005d3c 	.word	0x08005d3c
 8005ccc:	08005d3c 	.word	0x08005d3c
 8005cd0:	08005d40 	.word	0x08005d40

08005cd4 <memset>:
 8005cd4:	4402      	add	r2, r0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <memset+0xa>
 8005cdc:	4770      	bx	lr
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <memset+0x4>

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
